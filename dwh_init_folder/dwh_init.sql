-- DATABASE INITIALIZATION -----------------------------------------------------
--
-- The following code performs the initial setup of the PostgreSQL database with
-- required objects for the anchor database.
--
--------------------------------------------------------------------------------
-- create schema
CREATE SCHEMA IF NOT EXISTS public;
-- set schema search path
SET search_path = public;
-- KNOTS --------------------------------------------------------------------------------------------------------------
--
-- Knots are used to store finite sets of values, normally used to describe states
-- of entities (through knotted attributes) or relationships (through knotted ties).
-- Knots have their own surrogate identities and are therefore immutable.
-- Values can be added to the set over time though.
-- Knots should have values that are mutually exclusive and exhaustive.
-- Knots are unfolded when using equivalence.
--
-- ANCHORS AND ATTRIBUTES ---------------------------------------------------------------------------------------------
--
-- Anchors are used to store the identities of entities.
-- Anchors are immutable.
-- Attributes are used to store values for properties of entities.
-- Attributes are mutable, their values may change over one or more types of time.
-- Attributes have four flavors: static, historized, knotted static, and knotted historized.
-- Anchors may have zero or more adjoined attributes.
--
-- Anchor table -------------------------------------------------------------------------------------------------------
-- CA_categories table (with 2 attributes)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.CA_categories (
    CA_ID bigint generated by default as identity not null,
    Metadata_CA bigint not null, 
    constraint pkCA_categories primary key (
        CA_ID 
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- CA_CAN_categories_category_name table (on CA_categories)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.CA_CAN_categories_category_name (
    CA_CAN_CA_ID bigint not null,
    CA_CAN_categories_category_name VARCHAR(100) not null,
    Metadata_CA_CAN bigint not null,
    constraint fkCA_CAN_categories_category_name foreign key (
        CA_CAN_CA_ID
    ) references public.CA_categories (CA_ID),
    constraint pkCA_CAN_categories_category_name primary key (
        CA_CAN_CA_ID 
    ) include (
        CA_CAN_categories_category_name
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- CA_CAI1_categories_category_id table (on CA_categories)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.CA_CAI1_categories_category_id (
    CA_CAI1_CA_ID bigint not null,
    CA_CAI1_categories_category_id SERIAL not null,
    Metadata_CA_CAI1 bigint not null,
    constraint fkCA_CAI1_categories_category_id foreign key (
        CA_CAI1_CA_ID
    ) references public.CA_categories (CA_ID),
    constraint pkCA_CAI1_categories_category_id primary key (
        CA_CAI1_CA_ID 
    ) include (
        CA_CAI1_categories_category_id
    )
);
-- Anchor table -------------------------------------------------------------------------------------------------------
-- PR_products table (with 7 attributes)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PR_products (
    PR_ID bigint generated by default as identity not null,
    Metadata_PR bigint not null, 
    constraint pkPR_products primary key (
        PR_ID 
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PR_CAI2_products_category_id table (on PR_products)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PR_CAI2_products_category_id (
    PR_CAI2_PR_ID bigint not null,
    PR_CAI2_products_category_id bigint not null,
    Metadata_PR_CAI2 bigint not null,
    constraint fkPR_CAI2_products_category_id foreign key (
        PR_CAI2_PR_ID
    ) references public.PR_products (PR_ID),
    constraint pkPR_CAI2_products_category_id primary key (
        PR_CAI2_PR_ID 
    ) include (
        PR_CAI2_products_category_id
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PR_MAI_products_manufacturer_id table (on PR_products)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PR_MAI_products_manufacturer_id (
    PR_MAI_PR_ID bigint not null,
    PR_MAI_products_manufacturer_id bigint not null,
    Metadata_PR_MAI bigint not null,
    constraint fkPR_MAI_products_manufacturer_id foreign key (
        PR_MAI_PR_ID
    ) references public.PR_products (PR_ID),
    constraint pkPR_MAI_products_manufacturer_id primary key (
        PR_MAI_PR_ID 
    ) include (
        PR_MAI_products_manufacturer_id
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PR_PRI_products_product_id table (on PR_products)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PR_PRI_products_product_id (
    PR_PRI_PR_ID bigint not null,
    PR_PRI_products_product_id SERIAL not null,
    Metadata_PR_PRI bigint not null,
    constraint fkPR_PRI_products_product_id foreign key (
        PR_PRI_PR_ID
    ) references public.PR_products (PR_ID),
    constraint pkPR_PRI_products_product_id primary key (
        PR_PRI_PR_ID 
    ) include (
        PR_PRI_products_product_id
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PR_PPU_products_product_picture_url table (on PR_products)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PR_PPU_products_product_picture_url (
    PR_PPU_PR_ID bigint not null,
    PR_PPU_products_product_picture_url varchar(255) not null,
    Metadata_PR_PPU bigint not null,
    constraint fkPR_PPU_products_product_picture_url foreign key (
        PR_PPU_PR_ID
    ) references public.PR_products (PR_ID),
    constraint pkPR_PPU_products_product_picture_url primary key (
        PR_PPU_PR_ID 
    ) include (
        PR_PPU_products_product_picture_url
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PR_PRN_products_product_name table (on PR_products)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PR_PRN_products_product_name (
    PR_PRN_PR_ID bigint not null,
    PR_PRN_products_product_name varchar(255) not null,
    Metadata_PR_PRN bigint not null,
    constraint fkPR_PRN_products_product_name foreign key (
        PR_PRN_PR_ID
    ) references public.PR_products (PR_ID),
    constraint pkPR_PRN_products_product_name primary key (
        PR_PRN_PR_ID 
    ) include (
        PR_PRN_products_product_name
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PR_PAR_products_product_age_restriction table (on PR_products)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PR_PAR_products_product_age_restriction (
    PR_PAR_PR_ID bigint not null,
    PR_PAR_products_product_age_restriction bigint not null,
    Metadata_PR_PAR bigint not null,
    constraint fkPR_PAR_products_product_age_restriction foreign key (
        PR_PAR_PR_ID
    ) references public.PR_products (PR_ID),
    constraint pkPR_PAR_products_product_age_restriction primary key (
        PR_PAR_PR_ID 
    ) include (
        PR_PAR_products_product_age_restriction
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PR_PRD_products_product_description table (on PR_products)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PR_PRD_products_product_description (
    PR_PRD_PR_ID bigint not null,
    PR_PRD_products_product_description varchar(255) not null,
    Metadata_PR_PRD bigint not null,
    constraint fkPR_PRD_products_product_description foreign key (
        PR_PRD_PR_ID
    ) references public.PR_products (PR_ID),
    constraint pkPR_PRD_products_product_description primary key (
        PR_PRD_PR_ID 
    ) include (
        PR_PRD_products_product_description
    )
);
-- Anchor table -------------------------------------------------------------------------------------------------------
-- MA_manufacturers table (with 2 attributes)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.MA_manufacturers (
    MA_ID bigint generated by default as identity not null,
    Metadata_MA bigint not null, 
    constraint pkMA_manufacturers primary key (
        MA_ID 
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- MA_MAN_manufacturers_manufacturer_name table (on MA_manufacturers)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.MA_MAN_manufacturers_manufacturer_name (
    MA_MAN_MA_ID bigint not null,
    MA_MAN_manufacturers_manufacturer_name varchar(100) not null,
    Metadata_MA_MAN bigint not null,
    constraint fkMA_MAN_manufacturers_manufacturer_name foreign key (
        MA_MAN_MA_ID
    ) references public.MA_manufacturers (MA_ID),
    constraint pkMA_MAN_manufacturers_manufacturer_name primary key (
        MA_MAN_MA_ID 
    ) include (
        MA_MAN_manufacturers_manufacturer_name
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- MA_MLE_manufacturers_manufacturer_legal_entity table (on MA_manufacturers)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.MA_MLE_manufacturers_manufacturer_legal_entity (
    MA_MLE_MA_ID bigint not null,
    MA_MLE_manufacturers_manufacturer_legal_entity varchar(100) not null,
    Metadata_MA_MLE bigint not null,
    constraint fkMA_MLE_manufacturers_manufacturer_legal_entity foreign key (
        MA_MLE_MA_ID
    ) references public.MA_manufacturers (MA_ID),
    constraint pkMA_MLE_manufacturers_manufacturer_legal_entity primary key (
        MA_MLE_MA_ID 
    ) include (
        MA_MLE_manufacturers_manufacturer_legal_entity
    )
);
-- Anchor table -------------------------------------------------------------------------------------------------------
-- PC_price_change table (with 3 attributes)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PC_price_change (
    PC_ID bigint generated by default as identity not null,
    Metadata_PC bigint not null, 
    constraint pkPC_price_change primary key (
        PC_ID 
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PC_PRI_price_change_product_id table (on PC_price_change)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PC_PRI_price_change_product_id (
    PC_PRI_PC_ID bigint not null,
    PC_PRI_price_change_product_id bigint not null,
    Metadata_PC_PRI bigint not null,
    constraint fkPC_PRI_price_change_product_id foreign key (
        PC_PRI_PC_ID
    ) references public.PC_price_change (PC_ID),
    constraint pkPC_PRI_price_change_product_id primary key (
        PC_PRI_PC_ID 
    ) include (
        PC_PRI_price_change_product_id
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PC_PCT_price_change_price_change_ts table (on PC_price_change)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PC_PCT_price_change_price_change_ts (
    PC_PCT_PC_ID bigint not null,
    PC_PCT_price_change_price_change_ts timestamp not null,
    Metadata_PC_PCT bigint not null,
    constraint fkPC_PCT_price_change_price_change_ts foreign key (
        PC_PCT_PC_ID
    ) references public.PC_price_change (PC_ID),
    constraint pkPC_PCT_price_change_price_change_ts primary key (
        PC_PCT_PC_ID 
    ) include (
        PC_PCT_price_change_price_change_ts
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PC_NEP_price_change_new_price table (on PC_price_change)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PC_NEP_price_change_new_price (
    PC_NEP_PC_ID bigint not null,
    PC_NEP_price_change_new_price numeric(9,2) not null,
    Metadata_PC_NEP bigint not null,
    constraint fkPC_NEP_price_change_new_price foreign key (
        PC_NEP_PC_ID
    ) references public.PC_price_change (PC_ID),
    constraint pkPC_NEP_price_change_new_price primary key (
        PC_NEP_PC_ID 
    ) include (
        PC_NEP_price_change_new_price
    )
);
-- Anchor table -------------------------------------------------------------------------------------------------------
-- DE_deliveries table (with 5 attributes)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.DE_deliveries (
    DE_ID bigint generated by default as identity not null,
    Metadata_DE bigint not null, 
    constraint pkDE_deliveries primary key (
        DE_ID 
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- DE_STI_deliveries_store_id table (on DE_deliveries)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.DE_STI_deliveries_store_id (
    DE_STI_DE_ID bigint not null,
    DE_STI_deliveries_store_id bigint not null,
    Metadata_DE_STI bigint not null,
    constraint fkDE_STI_deliveries_store_id foreign key (
        DE_STI_DE_ID
    ) references public.DE_deliveries (DE_ID),
    constraint pkDE_STI_deliveries_store_id primary key (
        DE_STI_DE_ID 
    ) include (
        DE_STI_deliveries_store_id
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- DE_DEI_deliveries_delivery_id table (on DE_deliveries)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.DE_DEI_deliveries_delivery_id (
    DE_DEI_DE_ID bigint not null,
    DE_DEI_deliveries_delivery_id bigint not null,
    Metadata_DE_DEI bigint not null,
    constraint fkDE_DEI_deliveries_delivery_id foreign key (
        DE_DEI_DE_ID
    ) references public.DE_deliveries (DE_ID),
    constraint pkDE_DEI_deliveries_delivery_id primary key (
        DE_DEI_DE_ID 
    ) include (
        DE_DEI_deliveries_delivery_id
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- DE_PRI_deliveries_product_id table (on DE_deliveries)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.DE_PRI_deliveries_product_id (
    DE_PRI_DE_ID bigint not null,
    DE_PRI_deliveries_product_id bigint not null,
    Metadata_DE_PRI bigint not null,
    constraint fkDE_PRI_deliveries_product_id foreign key (
        DE_PRI_DE_ID
    ) references public.DE_deliveries (DE_ID),
    constraint pkDE_PRI_deliveries_product_id primary key (
        DE_PRI_DE_ID 
    ) include (
        DE_PRI_deliveries_product_id
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- DE_DED_deliveries_delivery_date table (on DE_deliveries)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.DE_DED_deliveries_delivery_date (
    DE_DED_DE_ID bigint not null,
    DE_DED_deliveries_delivery_date date not null,
    Metadata_DE_DED bigint not null,
    constraint fkDE_DED_deliveries_delivery_date foreign key (
        DE_DED_DE_ID
    ) references public.DE_deliveries (DE_ID),
    constraint pkDE_DED_deliveries_delivery_date primary key (
        DE_DED_DE_ID 
    ) include (
        DE_DED_deliveries_delivery_date
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- DE_PRC_deliveries_product_count table (on DE_deliveries)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.DE_PRC_deliveries_product_count (
    DE_PRC_DE_ID bigint not null,
    DE_PRC_deliveries_product_count bigint not null,
    Metadata_DE_PRC bigint not null,
    constraint fkDE_PRC_deliveries_product_count foreign key (
        DE_PRC_DE_ID
    ) references public.DE_deliveries (DE_ID),
    constraint pkDE_PRC_deliveries_product_count primary key (
        DE_PRC_DE_ID 
    ) include (
        DE_PRC_deliveries_product_count
    )
);
-- Anchor table -------------------------------------------------------------------------------------------------------
-- ST_stores table (with 5 attributes)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.ST_stores (
    ST_ID bigint generated by default as identity not null,
    Metadata_ST bigint not null, 
    constraint pkST_stores primary key (
        ST_ID 
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- ST_STI_stores_store_id table (on ST_stores)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.ST_STI_stores_store_id (
    ST_STI_ST_ID bigint not null,
    ST_STI_stores_store_id SERIAL not null,
    Metadata_ST_STI bigint not null,
    constraint fkST_STI_stores_store_id foreign key (
        ST_STI_ST_ID
    ) references public.ST_stores (ST_ID),
    constraint pkST_STI_stores_store_id primary key (
        ST_STI_ST_ID 
    ) include (
        ST_STI_stores_store_id
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- ST_STN_stores_store_name table (on ST_stores)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.ST_STN_stores_store_name (
    ST_STN_ST_ID bigint not null,
    ST_STN_stores_store_name varchar(255) not null,
    Metadata_ST_STN bigint not null,
    constraint fkST_STN_stores_store_name foreign key (
        ST_STN_ST_ID
    ) references public.ST_stores (ST_ID),
    constraint pkST_STN_stores_store_name primary key (
        ST_STN_ST_ID 
    ) include (
        ST_STN_stores_store_name
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- ST_STC_stores_store_country table (on ST_stores)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.ST_STC_stores_store_country (
    ST_STC_ST_ID bigint not null,
    ST_STC_stores_store_country varchar(255) not null,
    Metadata_ST_STC bigint not null,
    constraint fkST_STC_stores_store_country foreign key (
        ST_STC_ST_ID
    ) references public.ST_stores (ST_ID),
    constraint pkST_STC_stores_store_country primary key (
        ST_STC_ST_ID 
    ) include (
        ST_STC_stores_store_country
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- ST_SCI_stores_store_city table (on ST_stores)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.ST_SCI_stores_store_city (
    ST_SCI_ST_ID bigint not null,
    ST_SCI_stores_store_city varchar(255) not null,
    Metadata_ST_SCI bigint not null,
    constraint fkST_SCI_stores_store_city foreign key (
        ST_SCI_ST_ID
    ) references public.ST_stores (ST_ID),
    constraint pkST_SCI_stores_store_city primary key (
        ST_SCI_ST_ID 
    ) include (
        ST_SCI_stores_store_city
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- ST_STA_stores_store_address table (on ST_stores)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.ST_STA_stores_store_address (
    ST_STA_ST_ID bigint not null,
    ST_STA_stores_store_address varchar(255) not null,
    Metadata_ST_STA bigint not null,
    constraint fkST_STA_stores_store_address foreign key (
        ST_STA_ST_ID
    ) references public.ST_stores (ST_ID),
    constraint pkST_STA_stores_store_address primary key (
        ST_STA_ST_ID 
    ) include (
        ST_STA_stores_store_address
    )
);
-- Anchor table -------------------------------------------------------------------------------------------------------
-- PU_purchases table (with 5 attributes)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PU_purchases (
    PU_ID bigint generated by default as identity not null,
    Metadata_PU bigint not null, 
    constraint pkPU_purchases primary key (
        PU_ID 
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PU_PUD_purchases_purchase_date table (on PU_purchases)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PU_PUD_purchases_purchase_date (
    PU_PUD_PU_ID bigint not null,
    PU_PUD_purchases_purchase_date timestamp not null,
    Metadata_PU_PUD bigint not null,
    constraint fkPU_PUD_purchases_purchase_date foreign key (
        PU_PUD_PU_ID
    ) references public.PU_purchases (PU_ID),
    constraint pkPU_PUD_purchases_purchase_date primary key (
        PU_PUD_PU_ID 
    ) include (
        PU_PUD_purchases_purchase_date
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PU_PUI_purchases_purchase_id table (on PU_purchases)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PU_PUI_purchases_purchase_id (
    PU_PUI_PU_ID bigint not null,
    PU_PUI_purchases_purchase_id bigint not null,
    Metadata_PU_PUI bigint not null,
    constraint fkPU_PUI_purchases_purchase_id foreign key (
        PU_PUI_PU_ID
    ) references public.PU_purchases (PU_ID),
    constraint pkPU_PUI_purchases_purchase_id primary key (
        PU_PUI_PU_ID 
    ) include (
        PU_PUI_purchases_purchase_id
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PU_PPT_purchases_purchase_payment_type table (on PU_purchases)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PU_PPT_purchases_purchase_payment_type (
    PU_PPT_PU_ID bigint not null,
    PU_PPT_purchases_purchase_payment_type varchar(255) not null,
    Metadata_PU_PPT bigint not null,
    constraint fkPU_PPT_purchases_purchase_payment_type foreign key (
        PU_PPT_PU_ID
    ) references public.PU_purchases (PU_ID),
    constraint pkPU_PPT_purchases_purchase_payment_type primary key (
        PU_PPT_PU_ID 
    ) include (
        PU_PPT_purchases_purchase_payment_type
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PU_CUI_purchases_customer_id table (on PU_purchases)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PU_CUI_purchases_customer_id (
    PU_CUI_PU_ID bigint not null,
    PU_CUI_purchases_customer_id bigint not null,
    Metadata_PU_CUI bigint not null,
    constraint fkPU_CUI_purchases_customer_id foreign key (
        PU_CUI_PU_ID
    ) references public.PU_purchases (PU_ID),
    constraint pkPU_CUI_purchases_customer_id primary key (
        PU_CUI_PU_ID 
    ) include (
        PU_CUI_purchases_customer_id
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PU_STI_purchases_store_id table (on PU_purchases)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PU_STI_purchases_store_id (
    PU_STI_PU_ID bigint not null,
    PU_STI_purchases_store_id bigint not null,
    Metadata_PU_STI bigint not null,
    constraint fkPU_STI_purchases_store_id foreign key (
        PU_STI_PU_ID
    ) references public.PU_purchases (PU_ID),
    constraint pkPU_STI_purchases_store_id primary key (
        PU_STI_PU_ID 
    ) include (
        PU_STI_purchases_store_id
    )
);
-- Anchor table -------------------------------------------------------------------------------------------------------
-- CU_customers table (with 5 attributes)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.CU_customers (
    CU_ID bigint generated by default as identity not null,
    Metadata_CU bigint not null, 
    constraint pkCU_customers primary key (
        CU_ID 
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- CU_CUI_customers_customer_id table (on CU_customers)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.CU_CUI_customers_customer_id (
    CU_CUI_CU_ID bigint not null,
    CU_CUI_customers_customer_id SERIAL not null,
    Metadata_CU_CUI bigint not null,
    constraint fkCU_CUI_customers_customer_id foreign key (
        CU_CUI_CU_ID
    ) references public.CU_customers (CU_ID),
    constraint pkCU_CUI_customers_customer_id primary key (
        CU_CUI_CU_ID 
    ) include (
        CU_CUI_customers_customer_id
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- CU_CUF_customers_customer_fname table (on CU_customers)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.CU_CUF_customers_customer_fname (
    CU_CUF_CU_ID bigint not null,
    CU_CUF_customers_customer_fname varchar(100) not null,
    Metadata_CU_CUF bigint not null,
    constraint fkCU_CUF_customers_customer_fname foreign key (
        CU_CUF_CU_ID
    ) references public.CU_customers (CU_ID),
    constraint pkCU_CUF_customers_customer_fname primary key (
        CU_CUF_CU_ID 
    ) include (
        CU_CUF_customers_customer_fname
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- CU_CUL_customers_customer_lname table (on CU_customers)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.CU_CUL_customers_customer_lname (
    CU_CUL_CU_ID bigint not null,
    CU_CUL_customers_customer_lname varchar(100) not null,
    Metadata_CU_CUL bigint not null,
    constraint fkCU_CUL_customers_customer_lname foreign key (
        CU_CUL_CU_ID
    ) references public.CU_customers (CU_ID),
    constraint pkCU_CUL_customers_customer_lname primary key (
        CU_CUL_CU_ID 
    ) include (
        CU_CUL_customers_customer_lname
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- CU_CUG_customers_customer_gender table (on CU_customers)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.CU_CUG_customers_customer_gender (
    CU_CUG_CU_ID bigint not null,
    CU_CUG_customers_customer_gender varchar(100) not null,
    Metadata_CU_CUG bigint not null,
    constraint fkCU_CUG_customers_customer_gender foreign key (
        CU_CUG_CU_ID
    ) references public.CU_customers (CU_ID),
    constraint pkCU_CUG_customers_customer_gender primary key (
        CU_CUG_CU_ID 
    ) include (
        CU_CUG_customers_customer_gender
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- CU_CUP_customers_customer_phone table (on CU_customers)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.CU_CUP_customers_customer_phone (
    CU_CUP_CU_ID bigint not null,
    CU_CUP_customers_customer_phone varchar(100) not null,
    Metadata_CU_CUP bigint not null,
    constraint fkCU_CUP_customers_customer_phone foreign key (
        CU_CUP_CU_ID
    ) references public.CU_customers (CU_ID),
    constraint pkCU_CUP_customers_customer_phone primary key (
        CU_CUP_CU_ID 
    ) include (
        CU_CUP_customers_customer_phone
    )
);
-- Anchor table -------------------------------------------------------------------------------------------------------
-- PI_purchase_items table (with 4 attributes)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PI_purchase_items (
    PI_ID bigint generated by default as identity not null,
    Metadata_PI bigint not null, 
    constraint pkPI_purchase_items primary key (
        PI_ID 
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PI_PRI_purchase_items_product_id table (on PI_purchase_items)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PI_PRI_purchase_items_product_id (
    PI_PRI_PI_ID bigint not null,
    PI_PRI_purchase_items_product_id bigint not null,
    Metadata_PI_PRI bigint not null,
    constraint fkPI_PRI_purchase_items_product_id foreign key (
        PI_PRI_PI_ID
    ) references public.PI_purchase_items (PI_ID),
    constraint pkPI_PRI_purchase_items_product_id primary key (
        PI_PRI_PI_ID 
    ) include (
        PI_PRI_purchase_items_product_id
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PI_PUI_purchase_items_purchase_id table (on PI_purchase_items)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PI_PUI_purchase_items_purchase_id (
    PI_PUI_PI_ID bigint not null,
    PI_PUI_purchase_items_purchase_id bigint not null,
    Metadata_PI_PUI bigint not null,
    constraint fkPI_PUI_purchase_items_purchase_id foreign key (
        PI_PUI_PI_ID
    ) references public.PI_purchase_items (PI_ID),
    constraint pkPI_PUI_purchase_items_purchase_id primary key (
        PI_PUI_PI_ID 
    ) include (
        PI_PUI_purchase_items_purchase_id
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PI_PRC_purchase_items_product_count table (on PI_purchase_items)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PI_PRC_purchase_items_product_count (
    PI_PRC_PI_ID bigint not null,
    PI_PRC_purchase_items_product_count bigint not null,
    Metadata_PI_PRC bigint not null,
    constraint fkPI_PRC_purchase_items_product_count foreign key (
        PI_PRC_PI_ID
    ) references public.PI_purchase_items (PI_ID),
    constraint pkPI_PRC_purchase_items_product_count primary key (
        PI_PRC_PI_ID 
    ) include (
        PI_PRC_purchase_items_product_count
    )
);
-- Static attribute table ---------------------------------------------------------------------------------------------
-- PI_PRP_purchase_items_product_price table (on PI_purchase_items)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PI_PRP_purchase_items_product_price (
    PI_PRP_PI_ID bigint not null,
    PI_PRP_purchase_items_product_price numeric(9,2) not null,
    Metadata_PI_PRP bigint not null,
    constraint fkPI_PRP_purchase_items_product_price foreign key (
        PI_PRP_PI_ID
    ) references public.PI_purchase_items (PI_ID),
    constraint pkPI_PRP_purchase_items_product_price primary key (
        PI_PRP_PI_ID 
    ) include (
        PI_PRP_purchase_items_product_price
    )
);
-- TIES ---------------------------------------------------------------------------------------------------------------
--
-- Ties are used to represent relationships between entities.
-- They come in four flavors: static, historized, knotted static, and knotted historized.
-- Ties have cardinality, constraining how members may participate in the relationship.
-- Every entity that is a member in a tie has a specified role in the relationship.
-- Ties must have at least two anchor roles and zero or more knot roles.
--
-- Static tie table ---------------------------------------------------------------------------------------------------
-- CA_cat_id_PR_cat_id2 table (having 2 roles)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.CA_cat_id_PR_cat_id2 (
    CA_ID_cat_id bigint not null, 
    PR_ID_cat_id2 bigint not null, 
    Metadata_CA_cat_id_PR_cat_id2 bigint not null,
    constraint CA_cat_id_PR_cat_id2_fkCA_cat_id foreign key (
        CA_ID_cat_id
    ) references public.CA_categories(CA_ID), 
    constraint CA_cat_id_PR_cat_id2_fkPR_cat_id2 foreign key (
        PR_ID_cat_id2
    ) references public.PR_products(PR_ID), 
    constraint pkCA_cat_id_PR_cat_id2 primary key (
        PR_ID_cat_id2 
    )
);
-- Static tie table ---------------------------------------------------------------------------------------------------
-- PR_man_id2_MA_man_id table (having 2 roles)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PR_man_id2_MA_man_id (
    PR_ID_man_id2 bigint not null, 
    MA_ID_man_id bigint not null, 
    Metadata_PR_man_id2_MA_man_id bigint not null,
    constraint PR_man_id2_MA_man_id_fkPR_man_id2 foreign key (
        PR_ID_man_id2
    ) references public.PR_products(PR_ID), 
    constraint PR_man_id2_MA_man_id_fkMA_man_id foreign key (
        MA_ID_man_id
    ) references public.MA_manufacturers(MA_ID), 
    constraint pkPR_man_id2_MA_man_id primary key (
        PR_ID_man_id2 ,
        MA_ID_man_id 
    )
);
-- Static tie table ---------------------------------------------------------------------------------------------------
-- PR_prod_id2_PC_prod_id table (having 2 roles)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PR_prod_id2_PC_prod_id (
    PR_ID_prod_id2 bigint not null, 
    PC_ID_prod_id bigint not null, 
    Metadata_PR_prod_id2_PC_prod_id bigint not null,
    constraint PR_prod_id2_PC_prod_id_fkPR_prod_id2 foreign key (
        PR_ID_prod_id2
    ) references public.PR_products(PR_ID), 
    constraint PR_prod_id2_PC_prod_id_fkPC_prod_id foreign key (
        PC_ID_prod_id
    ) references public.PC_price_change(PC_ID), 
    constraint pkPR_prod_id2_PC_prod_id primary key (
        PR_ID_prod_id2 ,
        PC_ID_prod_id 
    )
);
-- Static tie table ---------------------------------------------------------------------------------------------------
-- PR_prod_id_DE_prod_id2 table (having 2 roles)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PR_prod_id_DE_prod_id2 (
    PR_ID_prod_id bigint not null, 
    DE_ID_prod_id2 bigint not null, 
    Metadata_PR_prod_id_DE_prod_id2 bigint not null,
    constraint PR_prod_id_DE_prod_id2_fkPR_prod_id foreign key (
        PR_ID_prod_id
    ) references public.PR_products(PR_ID), 
    constraint PR_prod_id_DE_prod_id2_fkDE_prod_id2 foreign key (
        DE_ID_prod_id2
    ) references public.DE_deliveries(DE_ID), 
    constraint pkPR_prod_id_DE_prod_id2 primary key (
        PR_ID_prod_id ,
        DE_ID_prod_id2 
    )
);
-- Static tie table ---------------------------------------------------------------------------------------------------
-- DE_store_id2_ST_store_id table (having 2 roles)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.DE_store_id2_ST_store_id (
    DE_ID_store_id2 bigint not null, 
    ST_ID_store_id bigint not null, 
    Metadata_DE_store_id2_ST_store_id bigint not null,
    constraint DE_store_id2_ST_store_id_fkDE_store_id2 foreign key (
        DE_ID_store_id2
    ) references public.DE_deliveries(DE_ID), 
    constraint DE_store_id2_ST_store_id_fkST_store_id foreign key (
        ST_ID_store_id
    ) references public.ST_stores(ST_ID), 
    constraint pkDE_store_id2_ST_store_id primary key (
        DE_ID_store_id2 ,
        ST_ID_store_id 
    )
);
-- Static tie table ---------------------------------------------------------------------------------------------------
-- ST_store_id2_PU_store_id table (having 2 roles)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.ST_store_id2_PU_store_id (
    ST_ID_store_id2 bigint not null, 
    PU_ID_store_id bigint not null, 
    Metadata_ST_store_id2_PU_store_id bigint not null,
    constraint ST_store_id2_PU_store_id_fkST_store_id2 foreign key (
        ST_ID_store_id2
    ) references public.ST_stores(ST_ID), 
    constraint ST_store_id2_PU_store_id_fkPU_store_id foreign key (
        PU_ID_store_id
    ) references public.PU_purchases(PU_ID), 
    constraint pkST_store_id2_PU_store_id primary key (
        ST_ID_store_id2 ,
        PU_ID_store_id 
    )
);
-- Static tie table ---------------------------------------------------------------------------------------------------
-- PU_cust_id1_CU_cust_id table (having 2 roles)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PU_cust_id1_CU_cust_id (
    PU_ID_cust_id1 bigint not null, 
    CU_ID_cust_id bigint not null, 
    Metadata_PU_cust_id1_CU_cust_id bigint not null,
    constraint PU_cust_id1_CU_cust_id_fkPU_cust_id1 foreign key (
        PU_ID_cust_id1
    ) references public.PU_purchases(PU_ID), 
    constraint PU_cust_id1_CU_cust_id_fkCU_cust_id foreign key (
        CU_ID_cust_id
    ) references public.CU_customers(CU_ID), 
    constraint pkPU_cust_id1_CU_cust_id primary key (
        PU_ID_cust_id1 ,
        CU_ID_cust_id 
    )
);
-- Static tie table ---------------------------------------------------------------------------------------------------
-- PU_pur_id2_PI_pur_id table (having 2 roles)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PU_pur_id2_PI_pur_id (
    PU_ID_pur_id2 bigint not null, 
    PI_ID_pur_id bigint not null, 
    Metadata_PU_pur_id2_PI_pur_id bigint not null,
    constraint PU_pur_id2_PI_pur_id_fkPU_pur_id2 foreign key (
        PU_ID_pur_id2
    ) references public.PU_purchases(PU_ID), 
    constraint PU_pur_id2_PI_pur_id_fkPI_pur_id foreign key (
        PI_ID_pur_id
    ) references public.PI_purchase_items(PI_ID), 
    constraint pkPU_pur_id2_PI_pur_id primary key (
        PU_ID_pur_id2 ,
        PI_ID_pur_id 
    )
);
-- Static tie table ---------------------------------------------------------------------------------------------------
-- PI_prod_id_PR_prod_id2 table (having 2 roles)
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.PI_prod_id_PR_prod_id2 (
    PI_ID_prod_id bigint not null, 
    PR_ID_prod_id2 bigint not null, 
    Metadata_PI_prod_id_PR_prod_id2 bigint not null,
    constraint PI_prod_id_PR_prod_id2_fkPI_prod_id foreign key (
        PI_ID_prod_id
    ) references public.PI_purchase_items(PI_ID), 
    constraint PI_prod_id_PR_prod_id2_fkPR_prod_id2 foreign key (
        PR_ID_prod_id2
    ) references public.PR_products(PR_ID), 
    constraint pkPI_prod_id_PR_prod_id2 primary key (
        PI_ID_prod_id ,
        PR_ID_prod_id2 
    )
);
-- KNOT EQUIVALENCE VIEWS ---------------------------------------------------------------------------------------------
--
-- Equivalence views combine the identity and equivalent parts of a knot into a single view, making
-- it look and behave like a regular knot. They also make it possible to retrieve data for only the
-- given equivalent.
--
-- @equivalent the equivalent that you want to retrieve data for
--
-- ATTRIBUTE EQUIVALENCE VIEWS ----------------------------------------------------------------------------------------
--
-- Equivalence views of attributes make it possible to retrieve data for only the given equivalent.
--
-- @equivalent the equivalent that you want to retrieve data for
--
-- KEY GENERATORS -----------------------------------------------------------------------------------------------------
--
-- These stored procedures can be used to generate identities of entities.
-- Corresponding anchors must have an incrementing identity column.
--
-- Key Generation Stored Procedure ------------------------------------------------------------------------------------
-- kCA_categories identity by surrogate key generation stored procedure
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.kCA_categories(
    requestedNumberOfIdentities bigint,
    metadata bigint
) RETURNS void AS '
    BEGIN
        IF requestedNumberOfIdentities > 0
        THEN
            INSERT INTO public.CA_categories (
                Metadata_CA
            )
            SELECT
                metadata
            FROM
                generate_series(1,requestedNumberOfIdentities);
        END IF;
    END;
' LANGUAGE plpgsql
;
-- Key Generation Stored Procedure ------------------------------------------------------------------------------------
-- kPR_products identity by surrogate key generation stored procedure
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.kPR_products(
    requestedNumberOfIdentities bigint,
    metadata bigint
) RETURNS void AS '
    BEGIN
        IF requestedNumberOfIdentities > 0
        THEN
            INSERT INTO public.PR_products (
                Metadata_PR
            )
            SELECT
                metadata
            FROM
                generate_series(1,requestedNumberOfIdentities);
        END IF;
    END;
' LANGUAGE plpgsql
;
-- Key Generation Stored Procedure ------------------------------------------------------------------------------------
-- kMA_manufacturers identity by surrogate key generation stored procedure
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.kMA_manufacturers(
    requestedNumberOfIdentities bigint,
    metadata bigint
) RETURNS void AS '
    BEGIN
        IF requestedNumberOfIdentities > 0
        THEN
            INSERT INTO public.MA_manufacturers (
                Metadata_MA
            )
            SELECT
                metadata
            FROM
                generate_series(1,requestedNumberOfIdentities);
        END IF;
    END;
' LANGUAGE plpgsql
;
-- Key Generation Stored Procedure ------------------------------------------------------------------------------------
-- kPC_price_change identity by surrogate key generation stored procedure
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.kPC_price_change(
    requestedNumberOfIdentities bigint,
    metadata bigint
) RETURNS void AS '
    BEGIN
        IF requestedNumberOfIdentities > 0
        THEN
            INSERT INTO public.PC_price_change (
                Metadata_PC
            )
            SELECT
                metadata
            FROM
                generate_series(1,requestedNumberOfIdentities);
        END IF;
    END;
' LANGUAGE plpgsql
;
-- Key Generation Stored Procedure ------------------------------------------------------------------------------------
-- kDE_deliveries identity by surrogate key generation stored procedure
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.kDE_deliveries(
    requestedNumberOfIdentities bigint,
    metadata bigint
) RETURNS void AS '
    BEGIN
        IF requestedNumberOfIdentities > 0
        THEN
            INSERT INTO public.DE_deliveries (
                Metadata_DE
            )
            SELECT
                metadata
            FROM
                generate_series(1,requestedNumberOfIdentities);
        END IF;
    END;
' LANGUAGE plpgsql
;
-- Key Generation Stored Procedure ------------------------------------------------------------------------------------
-- kST_stores identity by surrogate key generation stored procedure
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.kST_stores(
    requestedNumberOfIdentities bigint,
    metadata bigint
) RETURNS void AS '
    BEGIN
        IF requestedNumberOfIdentities > 0
        THEN
            INSERT INTO public.ST_stores (
                Metadata_ST
            )
            SELECT
                metadata
            FROM
                generate_series(1,requestedNumberOfIdentities);
        END IF;
    END;
' LANGUAGE plpgsql
;
-- Key Generation Stored Procedure ------------------------------------------------------------------------------------
-- kPU_purchases identity by surrogate key generation stored procedure
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.kPU_purchases(
    requestedNumberOfIdentities bigint,
    metadata bigint
) RETURNS void AS '
    BEGIN
        IF requestedNumberOfIdentities > 0
        THEN
            INSERT INTO public.PU_purchases (
                Metadata_PU
            )
            SELECT
                metadata
            FROM
                generate_series(1,requestedNumberOfIdentities);
        END IF;
    END;
' LANGUAGE plpgsql
;
-- Key Generation Stored Procedure ------------------------------------------------------------------------------------
-- kCU_customers identity by surrogate key generation stored procedure
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.kCU_customers(
    requestedNumberOfIdentities bigint,
    metadata bigint
) RETURNS void AS '
    BEGIN
        IF requestedNumberOfIdentities > 0
        THEN
            INSERT INTO public.CU_customers (
                Metadata_CU
            )
            SELECT
                metadata
            FROM
                generate_series(1,requestedNumberOfIdentities);
        END IF;
    END;
' LANGUAGE plpgsql
;
-- Key Generation Stored Procedure ------------------------------------------------------------------------------------
-- kPI_purchase_items identity by surrogate key generation stored procedure
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.kPI_purchase_items(
    requestedNumberOfIdentities bigint,
    metadata bigint
) RETURNS void AS '
    BEGIN
        IF requestedNumberOfIdentities > 0
        THEN
            INSERT INTO public.PI_purchase_items (
                Metadata_PI
            )
            SELECT
                metadata
            FROM
                generate_series(1,requestedNumberOfIdentities);
        END IF;
    END;
' LANGUAGE plpgsql
;
-- ATTRIBUTE TEMPORAL PERSPECTIVES ---------------------------------------------------------------------------------------
--
-- These table valued functions simplify temporal querying by providing a temporal
-- perspective of each attribute. There are three types of perspectives: latest,
-- point-in-time and now. 
--
-- The latest perspective shows the latest available information for each attribute.
-- The now perspective shows the information as it is right now.
-- The point-in-time perspective lets you travel through the information to the given timepoint.
--
-- @changingTimepoint the point in changing time to travel to
--
-- Under equivalence all these views default to equivalent = 0, however, corresponding
-- prepended-e perspectives are provided in order to select a specific equivalent.
--
-- @equivalent the equivalent for which to retrieve data
--
-- ANCHOR TEMPORAL PERSPECTIVES ---------------------------------------------------------------------------------------
--
-- These table valued functions simplify temporal querying by providing a temporal
-- perspective of each anchor. There are four types of perspectives: latest,
-- point-in-time, difference, and now. They also denormalize the anchor, its attributes,
-- and referenced knots from sixth to third normal form.
--
-- The latest perspective shows the latest available information for each anchor.
-- The now perspective shows the information as it is right now.
-- The point-in-time perspective lets you travel through the information to the given timepoint.
--
-- @changingTimepoint the point in changing time to travel to
--
-- The difference perspective shows changes between the two given timepoints, and for
-- changes in all or a selection of attributes.
--
-- @intervalStart the start of the interval for finding changes
-- @intervalEnd the end of the interval for finding changes
-- @selection a list of mnemonics for tracked attributes, ie 'MNE MON ICS', or null for all
--
-- Under equivalence all these views default to equivalent = 0, however, corresponding
-- prepended-e perspectives are provided in order to select a specific equivalent.
--
-- @equivalent the equivalent for which to retrieve data
--
-- Latest perspective -------------------------------------------------------------------------------------------------
-- lCA_categories viewed by the latest available information (may include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.lCA_categories AS
SELECT CA.CA_ID
     , CA.Metadata_CA
     , CAN.CA_CAN_CA_ID
     , CAN.Metadata_CA_CAN
     , CAN.CA_CAN_categories_category_name
     , CAI1.CA_CAI1_CA_ID
     , CAI1.Metadata_CA_CAI1
     , CAI1.CA_CAI1_categories_category_id
  FROM public.CA_categories CA
  LEFT 
  JOIN public.CA_CAN_categories_category_name CAN
    ON CAN.CA_CAN_CA_ID = CA.CA_ID
  LEFT 
  JOIN public.CA_CAI1_categories_category_id CAI1
    ON CAI1.CA_CAI1_CA_ID = CA.CA_ID;
;
-- Point-in-time perspective ------------------------------------------------------------------------------------------
-- pCA_categories viewed as it was on the given timepoint
-----------------------------------------------------------------------------------------------------------------------
 CREATE OR REPLACE FUNCTION public.pCA_categories 
      ( changingTimepoint timestamp
      )
RETURNS TABLE 
      ( CA_ID bigint
      , Metadata_CA bigint
      , CA_CAN_CA_ID bigint
      , Metadata_CA_CAN bigint
      , CA_CAN_categories_category_name VARCHAR(100)
      , CA_CAI1_CA_ID bigint
      , Metadata_CA_CAI1 bigint
      , CA_CAI1_categories_category_id SERIAL
      ) 
AS 
'
 SELECT CA.CA_ID
      , CA.Metadata_CA
      , CAN.CA_CAN_CA_ID
      , CAN.Metadata_CA_CAN
      , CAN.CA_CAN_categories_category_name
      , CAI1.CA_CAI1_CA_ID
      , CAI1.Metadata_CA_CAI1
      , CAI1.CA_CAI1_categories_category_id
   FROM public.CA_categories CA
   LEFT 
   JOIN public.CA_CAN_categories_category_name CAN
     ON CAN.CA_CAN_CA_ID = CA.CA_ID
   LEFT 
   JOIN public.CA_CAI1_categories_category_id CAI1
     ON CAI1.CA_CAI1_CA_ID = CA.CA_ID;
' 
LANGUAGE SQL STABLE
;
-- Now perspective ----------------------------------------------------------------------------------------------------
-- nCA_categories viewed as it currently is (cannot include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.nCA_categories
AS
SELECT *
  FROM public.pCA_categories(current_timestamp::timestamp)
;
-- Latest perspective -------------------------------------------------------------------------------------------------
-- lPR_products viewed by the latest available information (may include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.lPR_products AS
SELECT PR.PR_ID
     , PR.Metadata_PR
     , CAI2.PR_CAI2_PR_ID
     , CAI2.Metadata_PR_CAI2
     , CAI2.PR_CAI2_products_category_id
     , MAI.PR_MAI_PR_ID
     , MAI.Metadata_PR_MAI
     , MAI.PR_MAI_products_manufacturer_id
     , PRI.PR_PRI_PR_ID
     , PRI.Metadata_PR_PRI
     , PRI.PR_PRI_products_product_id
     , PPU.PR_PPU_PR_ID
     , PPU.Metadata_PR_PPU
     , PPU.PR_PPU_products_product_picture_url
     , PRN.PR_PRN_PR_ID
     , PRN.Metadata_PR_PRN
     , PRN.PR_PRN_products_product_name
     , PAR.PR_PAR_PR_ID
     , PAR.Metadata_PR_PAR
     , PAR.PR_PAR_products_product_age_restriction
     , PRD.PR_PRD_PR_ID
     , PRD.Metadata_PR_PRD
     , PRD.PR_PRD_products_product_description
  FROM public.PR_products PR
  LEFT 
  JOIN public.PR_CAI2_products_category_id CAI2
    ON CAI2.PR_CAI2_PR_ID = PR.PR_ID
  LEFT 
  JOIN public.PR_MAI_products_manufacturer_id MAI
    ON MAI.PR_MAI_PR_ID = PR.PR_ID
  LEFT 
  JOIN public.PR_PRI_products_product_id PRI
    ON PRI.PR_PRI_PR_ID = PR.PR_ID
  LEFT 
  JOIN public.PR_PPU_products_product_picture_url PPU
    ON PPU.PR_PPU_PR_ID = PR.PR_ID
  LEFT 
  JOIN public.PR_PRN_products_product_name PRN
    ON PRN.PR_PRN_PR_ID = PR.PR_ID
  LEFT 
  JOIN public.PR_PAR_products_product_age_restriction PAR
    ON PAR.PR_PAR_PR_ID = PR.PR_ID
  LEFT 
  JOIN public.PR_PRD_products_product_description PRD
    ON PRD.PR_PRD_PR_ID = PR.PR_ID;
;
-- Point-in-time perspective ------------------------------------------------------------------------------------------
-- pPR_products viewed as it was on the given timepoint
-----------------------------------------------------------------------------------------------------------------------
 CREATE OR REPLACE FUNCTION public.pPR_products 
      ( changingTimepoint timestamp
      )
RETURNS TABLE 
      ( PR_ID bigint
      , Metadata_PR bigint
      , PR_CAI2_PR_ID bigint
      , Metadata_PR_CAI2 bigint
      , PR_CAI2_products_category_id bigint
      , PR_MAI_PR_ID bigint
      , Metadata_PR_MAI bigint
      , PR_MAI_products_manufacturer_id bigint
      , PR_PRI_PR_ID bigint
      , Metadata_PR_PRI bigint
      , PR_PRI_products_product_id SERIAL
      , PR_PPU_PR_ID bigint
      , Metadata_PR_PPU bigint
      , PR_PPU_products_product_picture_url varchar(255)
      , PR_PRN_PR_ID bigint
      , Metadata_PR_PRN bigint
      , PR_PRN_products_product_name varchar(255)
      , PR_PAR_PR_ID bigint
      , Metadata_PR_PAR bigint
      , PR_PAR_products_product_age_restriction bigint
      , PR_PRD_PR_ID bigint
      , Metadata_PR_PRD bigint
      , PR_PRD_products_product_description varchar(255)
      ) 
AS 
'
 SELECT PR.PR_ID
      , PR.Metadata_PR
      , CAI2.PR_CAI2_PR_ID
      , CAI2.Metadata_PR_CAI2
      , CAI2.PR_CAI2_products_category_id
      , MAI.PR_MAI_PR_ID
      , MAI.Metadata_PR_MAI
      , MAI.PR_MAI_products_manufacturer_id
      , PRI.PR_PRI_PR_ID
      , PRI.Metadata_PR_PRI
      , PRI.PR_PRI_products_product_id
      , PPU.PR_PPU_PR_ID
      , PPU.Metadata_PR_PPU
      , PPU.PR_PPU_products_product_picture_url
      , PRN.PR_PRN_PR_ID
      , PRN.Metadata_PR_PRN
      , PRN.PR_PRN_products_product_name
      , PAR.PR_PAR_PR_ID
      , PAR.Metadata_PR_PAR
      , PAR.PR_PAR_products_product_age_restriction
      , PRD.PR_PRD_PR_ID
      , PRD.Metadata_PR_PRD
      , PRD.PR_PRD_products_product_description
   FROM public.PR_products PR
   LEFT 
   JOIN public.PR_CAI2_products_category_id CAI2
     ON CAI2.PR_CAI2_PR_ID = PR.PR_ID
   LEFT 
   JOIN public.PR_MAI_products_manufacturer_id MAI
     ON MAI.PR_MAI_PR_ID = PR.PR_ID
   LEFT 
   JOIN public.PR_PRI_products_product_id PRI
     ON PRI.PR_PRI_PR_ID = PR.PR_ID
   LEFT 
   JOIN public.PR_PPU_products_product_picture_url PPU
     ON PPU.PR_PPU_PR_ID = PR.PR_ID
   LEFT 
   JOIN public.PR_PRN_products_product_name PRN
     ON PRN.PR_PRN_PR_ID = PR.PR_ID
   LEFT 
   JOIN public.PR_PAR_products_product_age_restriction PAR
     ON PAR.PR_PAR_PR_ID = PR.PR_ID
   LEFT 
   JOIN public.PR_PRD_products_product_description PRD
     ON PRD.PR_PRD_PR_ID = PR.PR_ID;
' 
LANGUAGE SQL STABLE
;
-- Now perspective ----------------------------------------------------------------------------------------------------
-- nPR_products viewed as it currently is (cannot include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.nPR_products
AS
SELECT *
  FROM public.pPR_products(current_timestamp::timestamp)
;
-- Latest perspective -------------------------------------------------------------------------------------------------
-- lMA_manufacturers viewed by the latest available information (may include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.lMA_manufacturers AS
SELECT MA.MA_ID
     , MA.Metadata_MA
     , MAN.MA_MAN_MA_ID
     , MAN.Metadata_MA_MAN
     , MAN.MA_MAN_manufacturers_manufacturer_name
     , MLE.MA_MLE_MA_ID
     , MLE.Metadata_MA_MLE
     , MLE.MA_MLE_manufacturers_manufacturer_legal_entity
  FROM public.MA_manufacturers MA
  LEFT 
  JOIN public.MA_MAN_manufacturers_manufacturer_name MAN
    ON MAN.MA_MAN_MA_ID = MA.MA_ID
  LEFT 
  JOIN public.MA_MLE_manufacturers_manufacturer_legal_entity MLE
    ON MLE.MA_MLE_MA_ID = MA.MA_ID;
;
-- Point-in-time perspective ------------------------------------------------------------------------------------------
-- pMA_manufacturers viewed as it was on the given timepoint
-----------------------------------------------------------------------------------------------------------------------
 CREATE OR REPLACE FUNCTION public.pMA_manufacturers 
      ( changingTimepoint timestamp
      )
RETURNS TABLE 
      ( MA_ID bigint
      , Metadata_MA bigint
      , MA_MAN_MA_ID bigint
      , Metadata_MA_MAN bigint
      , MA_MAN_manufacturers_manufacturer_name varchar(100)
      , MA_MLE_MA_ID bigint
      , Metadata_MA_MLE bigint
      , MA_MLE_manufacturers_manufacturer_legal_entity varchar(100)
      ) 
AS 
'
 SELECT MA.MA_ID
      , MA.Metadata_MA
      , MAN.MA_MAN_MA_ID
      , MAN.Metadata_MA_MAN
      , MAN.MA_MAN_manufacturers_manufacturer_name
      , MLE.MA_MLE_MA_ID
      , MLE.Metadata_MA_MLE
      , MLE.MA_MLE_manufacturers_manufacturer_legal_entity
   FROM public.MA_manufacturers MA
   LEFT 
   JOIN public.MA_MAN_manufacturers_manufacturer_name MAN
     ON MAN.MA_MAN_MA_ID = MA.MA_ID
   LEFT 
   JOIN public.MA_MLE_manufacturers_manufacturer_legal_entity MLE
     ON MLE.MA_MLE_MA_ID = MA.MA_ID;
' 
LANGUAGE SQL STABLE
;
-- Now perspective ----------------------------------------------------------------------------------------------------
-- nMA_manufacturers viewed as it currently is (cannot include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.nMA_manufacturers
AS
SELECT *
  FROM public.pMA_manufacturers(current_timestamp::timestamp)
;
-- Latest perspective -------------------------------------------------------------------------------------------------
-- lPC_price_change viewed by the latest available information (may include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.lPC_price_change AS
SELECT PC.PC_ID
     , PC.Metadata_PC
     , PRI.PC_PRI_PC_ID
     , PRI.Metadata_PC_PRI
     , PRI.PC_PRI_price_change_product_id
     , PCT.PC_PCT_PC_ID
     , PCT.Metadata_PC_PCT
     , PCT.PC_PCT_price_change_price_change_ts
     , NEP.PC_NEP_PC_ID
     , NEP.Metadata_PC_NEP
     , NEP.PC_NEP_price_change_new_price
  FROM public.PC_price_change PC
  LEFT 
  JOIN public.PC_PRI_price_change_product_id PRI
    ON PRI.PC_PRI_PC_ID = PC.PC_ID
  LEFT 
  JOIN public.PC_PCT_price_change_price_change_ts PCT
    ON PCT.PC_PCT_PC_ID = PC.PC_ID
  LEFT 
  JOIN public.PC_NEP_price_change_new_price NEP
    ON NEP.PC_NEP_PC_ID = PC.PC_ID;
;
-- Point-in-time perspective ------------------------------------------------------------------------------------------
-- pPC_price_change viewed as it was on the given timepoint
-----------------------------------------------------------------------------------------------------------------------
 CREATE OR REPLACE FUNCTION public.pPC_price_change 
      ( changingTimepoint timestamp
      )
RETURNS TABLE 
      ( PC_ID bigint
      , Metadata_PC bigint
      , PC_PRI_PC_ID bigint
      , Metadata_PC_PRI bigint
      , PC_PRI_price_change_product_id bigint
      , PC_PCT_PC_ID bigint
      , Metadata_PC_PCT bigint
      , PC_PCT_price_change_price_change_ts timestamp
      , PC_NEP_PC_ID bigint
      , Metadata_PC_NEP bigint
      , PC_NEP_price_change_new_price numeric(9,2)
      ) 
AS 
'
 SELECT PC.PC_ID
      , PC.Metadata_PC
      , PRI.PC_PRI_PC_ID
      , PRI.Metadata_PC_PRI
      , PRI.PC_PRI_price_change_product_id
      , PCT.PC_PCT_PC_ID
      , PCT.Metadata_PC_PCT
      , PCT.PC_PCT_price_change_price_change_ts
      , NEP.PC_NEP_PC_ID
      , NEP.Metadata_PC_NEP
      , NEP.PC_NEP_price_change_new_price
   FROM public.PC_price_change PC
   LEFT 
   JOIN public.PC_PRI_price_change_product_id PRI
     ON PRI.PC_PRI_PC_ID = PC.PC_ID
   LEFT 
   JOIN public.PC_PCT_price_change_price_change_ts PCT
     ON PCT.PC_PCT_PC_ID = PC.PC_ID
   LEFT 
   JOIN public.PC_NEP_price_change_new_price NEP
     ON NEP.PC_NEP_PC_ID = PC.PC_ID;
' 
LANGUAGE SQL STABLE
;
-- Now perspective ----------------------------------------------------------------------------------------------------
-- nPC_price_change viewed as it currently is (cannot include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.nPC_price_change
AS
SELECT *
  FROM public.pPC_price_change(current_timestamp::timestamp)
;
-- Latest perspective -------------------------------------------------------------------------------------------------
-- lDE_deliveries viewed by the latest available information (may include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.lDE_deliveries AS
SELECT DE.DE_ID
     , DE.Metadata_DE
     , STI.DE_STI_DE_ID
     , STI.Metadata_DE_STI
     , STI.DE_STI_deliveries_store_id
     , DEI.DE_DEI_DE_ID
     , DEI.Metadata_DE_DEI
     , DEI.DE_DEI_deliveries_delivery_id
     , PRI.DE_PRI_DE_ID
     , PRI.Metadata_DE_PRI
     , PRI.DE_PRI_deliveries_product_id
     , DED.DE_DED_DE_ID
     , DED.Metadata_DE_DED
     , DED.DE_DED_deliveries_delivery_date
     , PRC.DE_PRC_DE_ID
     , PRC.Metadata_DE_PRC
     , PRC.DE_PRC_deliveries_product_count
  FROM public.DE_deliveries DE
  LEFT 
  JOIN public.DE_STI_deliveries_store_id STI
    ON STI.DE_STI_DE_ID = DE.DE_ID
  LEFT 
  JOIN public.DE_DEI_deliveries_delivery_id DEI
    ON DEI.DE_DEI_DE_ID = DE.DE_ID
  LEFT 
  JOIN public.DE_PRI_deliveries_product_id PRI
    ON PRI.DE_PRI_DE_ID = DE.DE_ID
  LEFT 
  JOIN public.DE_DED_deliveries_delivery_date DED
    ON DED.DE_DED_DE_ID = DE.DE_ID
  LEFT 
  JOIN public.DE_PRC_deliveries_product_count PRC
    ON PRC.DE_PRC_DE_ID = DE.DE_ID;
;
-- Point-in-time perspective ------------------------------------------------------------------------------------------
-- pDE_deliveries viewed as it was on the given timepoint
-----------------------------------------------------------------------------------------------------------------------
 CREATE OR REPLACE FUNCTION public.pDE_deliveries 
      ( changingTimepoint timestamp
      )
RETURNS TABLE 
      ( DE_ID bigint
      , Metadata_DE bigint
      , DE_STI_DE_ID bigint
      , Metadata_DE_STI bigint
      , DE_STI_deliveries_store_id bigint
      , DE_DEI_DE_ID bigint
      , Metadata_DE_DEI bigint
      , DE_DEI_deliveries_delivery_id bigint
      , DE_PRI_DE_ID bigint
      , Metadata_DE_PRI bigint
      , DE_PRI_deliveries_product_id bigint
      , DE_DED_DE_ID bigint
      , Metadata_DE_DED bigint
      , DE_DED_deliveries_delivery_date date
      , DE_PRC_DE_ID bigint
      , Metadata_DE_PRC bigint
      , DE_PRC_deliveries_product_count bigint
      ) 
AS 
'
 SELECT DE.DE_ID
      , DE.Metadata_DE
      , STI.DE_STI_DE_ID
      , STI.Metadata_DE_STI
      , STI.DE_STI_deliveries_store_id
      , DEI.DE_DEI_DE_ID
      , DEI.Metadata_DE_DEI
      , DEI.DE_DEI_deliveries_delivery_id
      , PRI.DE_PRI_DE_ID
      , PRI.Metadata_DE_PRI
      , PRI.DE_PRI_deliveries_product_id
      , DED.DE_DED_DE_ID
      , DED.Metadata_DE_DED
      , DED.DE_DED_deliveries_delivery_date
      , PRC.DE_PRC_DE_ID
      , PRC.Metadata_DE_PRC
      , PRC.DE_PRC_deliveries_product_count
   FROM public.DE_deliveries DE
   LEFT 
   JOIN public.DE_STI_deliveries_store_id STI
     ON STI.DE_STI_DE_ID = DE.DE_ID
   LEFT 
   JOIN public.DE_DEI_deliveries_delivery_id DEI
     ON DEI.DE_DEI_DE_ID = DE.DE_ID
   LEFT 
   JOIN public.DE_PRI_deliveries_product_id PRI
     ON PRI.DE_PRI_DE_ID = DE.DE_ID
   LEFT 
   JOIN public.DE_DED_deliveries_delivery_date DED
     ON DED.DE_DED_DE_ID = DE.DE_ID
   LEFT 
   JOIN public.DE_PRC_deliveries_product_count PRC
     ON PRC.DE_PRC_DE_ID = DE.DE_ID;
' 
LANGUAGE SQL STABLE
;
-- Now perspective ----------------------------------------------------------------------------------------------------
-- nDE_deliveries viewed as it currently is (cannot include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.nDE_deliveries
AS
SELECT *
  FROM public.pDE_deliveries(current_timestamp::timestamp)
;
-- Latest perspective -------------------------------------------------------------------------------------------------
-- lST_stores viewed by the latest available information (may include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.lST_stores AS
SELECT ST.ST_ID
     , ST.Metadata_ST
     , STI.ST_STI_ST_ID
     , STI.Metadata_ST_STI
     , STI.ST_STI_stores_store_id
     , STN.ST_STN_ST_ID
     , STN.Metadata_ST_STN
     , STN.ST_STN_stores_store_name
     , STC.ST_STC_ST_ID
     , STC.Metadata_ST_STC
     , STC.ST_STC_stores_store_country
     , SCI.ST_SCI_ST_ID
     , SCI.Metadata_ST_SCI
     , SCI.ST_SCI_stores_store_city
     , STA.ST_STA_ST_ID
     , STA.Metadata_ST_STA
     , STA.ST_STA_stores_store_address
  FROM public.ST_stores ST
  LEFT 
  JOIN public.ST_STI_stores_store_id STI
    ON STI.ST_STI_ST_ID = ST.ST_ID
  LEFT 
  JOIN public.ST_STN_stores_store_name STN
    ON STN.ST_STN_ST_ID = ST.ST_ID
  LEFT 
  JOIN public.ST_STC_stores_store_country STC
    ON STC.ST_STC_ST_ID = ST.ST_ID
  LEFT 
  JOIN public.ST_SCI_stores_store_city SCI
    ON SCI.ST_SCI_ST_ID = ST.ST_ID
  LEFT 
  JOIN public.ST_STA_stores_store_address STA
    ON STA.ST_STA_ST_ID = ST.ST_ID;
;
-- Point-in-time perspective ------------------------------------------------------------------------------------------
-- pST_stores viewed as it was on the given timepoint
-----------------------------------------------------------------------------------------------------------------------
 CREATE OR REPLACE FUNCTION public.pST_stores 
      ( changingTimepoint timestamp
      )
RETURNS TABLE 
      ( ST_ID bigint
      , Metadata_ST bigint
      , ST_STI_ST_ID bigint
      , Metadata_ST_STI bigint
      , ST_STI_stores_store_id SERIAL
      , ST_STN_ST_ID bigint
      , Metadata_ST_STN bigint
      , ST_STN_stores_store_name varchar(255)
      , ST_STC_ST_ID bigint
      , Metadata_ST_STC bigint
      , ST_STC_stores_store_country varchar(255)
      , ST_SCI_ST_ID bigint
      , Metadata_ST_SCI bigint
      , ST_SCI_stores_store_city varchar(255)
      , ST_STA_ST_ID bigint
      , Metadata_ST_STA bigint
      , ST_STA_stores_store_address varchar(255)
      ) 
AS 
'
 SELECT ST.ST_ID
      , ST.Metadata_ST
      , STI.ST_STI_ST_ID
      , STI.Metadata_ST_STI
      , STI.ST_STI_stores_store_id
      , STN.ST_STN_ST_ID
      , STN.Metadata_ST_STN
      , STN.ST_STN_stores_store_name
      , STC.ST_STC_ST_ID
      , STC.Metadata_ST_STC
      , STC.ST_STC_stores_store_country
      , SCI.ST_SCI_ST_ID
      , SCI.Metadata_ST_SCI
      , SCI.ST_SCI_stores_store_city
      , STA.ST_STA_ST_ID
      , STA.Metadata_ST_STA
      , STA.ST_STA_stores_store_address
   FROM public.ST_stores ST
   LEFT 
   JOIN public.ST_STI_stores_store_id STI
     ON STI.ST_STI_ST_ID = ST.ST_ID
   LEFT 
   JOIN public.ST_STN_stores_store_name STN
     ON STN.ST_STN_ST_ID = ST.ST_ID
   LEFT 
   JOIN public.ST_STC_stores_store_country STC
     ON STC.ST_STC_ST_ID = ST.ST_ID
   LEFT 
   JOIN public.ST_SCI_stores_store_city SCI
     ON SCI.ST_SCI_ST_ID = ST.ST_ID
   LEFT 
   JOIN public.ST_STA_stores_store_address STA
     ON STA.ST_STA_ST_ID = ST.ST_ID;
' 
LANGUAGE SQL STABLE
;
-- Now perspective ----------------------------------------------------------------------------------------------------
-- nST_stores viewed as it currently is (cannot include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.nST_stores
AS
SELECT *
  FROM public.pST_stores(current_timestamp::timestamp)
;
-- Latest perspective -------------------------------------------------------------------------------------------------
-- lPU_purchases viewed by the latest available information (may include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.lPU_purchases AS
SELECT PU.PU_ID
     , PU.Metadata_PU
     , PUD.PU_PUD_PU_ID
     , PUD.Metadata_PU_PUD
     , PUD.PU_PUD_purchases_purchase_date
     , PUI.PU_PUI_PU_ID
     , PUI.Metadata_PU_PUI
     , PUI.PU_PUI_purchases_purchase_id
     , PPT.PU_PPT_PU_ID
     , PPT.Metadata_PU_PPT
     , PPT.PU_PPT_purchases_purchase_payment_type
     , CUI.PU_CUI_PU_ID
     , CUI.Metadata_PU_CUI
     , CUI.PU_CUI_purchases_customer_id
     , STI.PU_STI_PU_ID
     , STI.Metadata_PU_STI
     , STI.PU_STI_purchases_store_id
  FROM public.PU_purchases PU
  LEFT 
  JOIN public.PU_PUD_purchases_purchase_date PUD
    ON PUD.PU_PUD_PU_ID = PU.PU_ID
  LEFT 
  JOIN public.PU_PUI_purchases_purchase_id PUI
    ON PUI.PU_PUI_PU_ID = PU.PU_ID
  LEFT 
  JOIN public.PU_PPT_purchases_purchase_payment_type PPT
    ON PPT.PU_PPT_PU_ID = PU.PU_ID
  LEFT 
  JOIN public.PU_CUI_purchases_customer_id CUI
    ON CUI.PU_CUI_PU_ID = PU.PU_ID
  LEFT 
  JOIN public.PU_STI_purchases_store_id STI
    ON STI.PU_STI_PU_ID = PU.PU_ID;
;
-- Point-in-time perspective ------------------------------------------------------------------------------------------
-- pPU_purchases viewed as it was on the given timepoint
-----------------------------------------------------------------------------------------------------------------------
 CREATE OR REPLACE FUNCTION public.pPU_purchases 
      ( changingTimepoint timestamp
      )
RETURNS TABLE 
      ( PU_ID bigint
      , Metadata_PU bigint
      , PU_PUD_PU_ID bigint
      , Metadata_PU_PUD bigint
      , PU_PUD_purchases_purchase_date timestamp
      , PU_PUI_PU_ID bigint
      , Metadata_PU_PUI bigint
      , PU_PUI_purchases_purchase_id bigint
      , PU_PPT_PU_ID bigint
      , Metadata_PU_PPT bigint
      , PU_PPT_purchases_purchase_payment_type varchar(255)
      , PU_CUI_PU_ID bigint
      , Metadata_PU_CUI bigint
      , PU_CUI_purchases_customer_id bigint
      , PU_STI_PU_ID bigint
      , Metadata_PU_STI bigint
      , PU_STI_purchases_store_id bigint
      ) 
AS 
'
 SELECT PU.PU_ID
      , PU.Metadata_PU
      , PUD.PU_PUD_PU_ID
      , PUD.Metadata_PU_PUD
      , PUD.PU_PUD_purchases_purchase_date
      , PUI.PU_PUI_PU_ID
      , PUI.Metadata_PU_PUI
      , PUI.PU_PUI_purchases_purchase_id
      , PPT.PU_PPT_PU_ID
      , PPT.Metadata_PU_PPT
      , PPT.PU_PPT_purchases_purchase_payment_type
      , CUI.PU_CUI_PU_ID
      , CUI.Metadata_PU_CUI
      , CUI.PU_CUI_purchases_customer_id
      , STI.PU_STI_PU_ID
      , STI.Metadata_PU_STI
      , STI.PU_STI_purchases_store_id
   FROM public.PU_purchases PU
   LEFT 
   JOIN public.PU_PUD_purchases_purchase_date PUD
     ON PUD.PU_PUD_PU_ID = PU.PU_ID
   LEFT 
   JOIN public.PU_PUI_purchases_purchase_id PUI
     ON PUI.PU_PUI_PU_ID = PU.PU_ID
   LEFT 
   JOIN public.PU_PPT_purchases_purchase_payment_type PPT
     ON PPT.PU_PPT_PU_ID = PU.PU_ID
   LEFT 
   JOIN public.PU_CUI_purchases_customer_id CUI
     ON CUI.PU_CUI_PU_ID = PU.PU_ID
   LEFT 
   JOIN public.PU_STI_purchases_store_id STI
     ON STI.PU_STI_PU_ID = PU.PU_ID;
' 
LANGUAGE SQL STABLE
;
-- Now perspective ----------------------------------------------------------------------------------------------------
-- nPU_purchases viewed as it currently is (cannot include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.nPU_purchases
AS
SELECT *
  FROM public.pPU_purchases(current_timestamp::timestamp)
;
-- Latest perspective -------------------------------------------------------------------------------------------------
-- lCU_customers viewed by the latest available information (may include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.lCU_customers AS
SELECT CU.CU_ID
     , CU.Metadata_CU
     , CUI.CU_CUI_CU_ID
     , CUI.Metadata_CU_CUI
     , CUI.CU_CUI_customers_customer_id
     , CUF.CU_CUF_CU_ID
     , CUF.Metadata_CU_CUF
     , CUF.CU_CUF_customers_customer_fname
     , CUL.CU_CUL_CU_ID
     , CUL.Metadata_CU_CUL
     , CUL.CU_CUL_customers_customer_lname
     , CUG.CU_CUG_CU_ID
     , CUG.Metadata_CU_CUG
     , CUG.CU_CUG_customers_customer_gender
     , CUP.CU_CUP_CU_ID
     , CUP.Metadata_CU_CUP
     , CUP.CU_CUP_customers_customer_phone
  FROM public.CU_customers CU
  LEFT 
  JOIN public.CU_CUI_customers_customer_id CUI
    ON CUI.CU_CUI_CU_ID = CU.CU_ID
  LEFT 
  JOIN public.CU_CUF_customers_customer_fname CUF
    ON CUF.CU_CUF_CU_ID = CU.CU_ID
  LEFT 
  JOIN public.CU_CUL_customers_customer_lname CUL
    ON CUL.CU_CUL_CU_ID = CU.CU_ID
  LEFT 
  JOIN public.CU_CUG_customers_customer_gender CUG
    ON CUG.CU_CUG_CU_ID = CU.CU_ID
  LEFT 
  JOIN public.CU_CUP_customers_customer_phone CUP
    ON CUP.CU_CUP_CU_ID = CU.CU_ID;
;
-- Point-in-time perspective ------------------------------------------------------------------------------------------
-- pCU_customers viewed as it was on the given timepoint
-----------------------------------------------------------------------------------------------------------------------
 CREATE OR REPLACE FUNCTION public.pCU_customers 
      ( changingTimepoint timestamp
      )
RETURNS TABLE 
      ( CU_ID bigint
      , Metadata_CU bigint
      , CU_CUI_CU_ID bigint
      , Metadata_CU_CUI bigint
      , CU_CUI_customers_customer_id SERIAL
      , CU_CUF_CU_ID bigint
      , Metadata_CU_CUF bigint
      , CU_CUF_customers_customer_fname varchar(100)
      , CU_CUL_CU_ID bigint
      , Metadata_CU_CUL bigint
      , CU_CUL_customers_customer_lname varchar(100)
      , CU_CUG_CU_ID bigint
      , Metadata_CU_CUG bigint
      , CU_CUG_customers_customer_gender varchar(100)
      , CU_CUP_CU_ID bigint
      , Metadata_CU_CUP bigint
      , CU_CUP_customers_customer_phone varchar(100)
      ) 
AS 
'
 SELECT CU.CU_ID
      , CU.Metadata_CU
      , CUI.CU_CUI_CU_ID
      , CUI.Metadata_CU_CUI
      , CUI.CU_CUI_customers_customer_id
      , CUF.CU_CUF_CU_ID
      , CUF.Metadata_CU_CUF
      , CUF.CU_CUF_customers_customer_fname
      , CUL.CU_CUL_CU_ID
      , CUL.Metadata_CU_CUL
      , CUL.CU_CUL_customers_customer_lname
      , CUG.CU_CUG_CU_ID
      , CUG.Metadata_CU_CUG
      , CUG.CU_CUG_customers_customer_gender
      , CUP.CU_CUP_CU_ID
      , CUP.Metadata_CU_CUP
      , CUP.CU_CUP_customers_customer_phone
   FROM public.CU_customers CU
   LEFT 
   JOIN public.CU_CUI_customers_customer_id CUI
     ON CUI.CU_CUI_CU_ID = CU.CU_ID
   LEFT 
   JOIN public.CU_CUF_customers_customer_fname CUF
     ON CUF.CU_CUF_CU_ID = CU.CU_ID
   LEFT 
   JOIN public.CU_CUL_customers_customer_lname CUL
     ON CUL.CU_CUL_CU_ID = CU.CU_ID
   LEFT 
   JOIN public.CU_CUG_customers_customer_gender CUG
     ON CUG.CU_CUG_CU_ID = CU.CU_ID
   LEFT 
   JOIN public.CU_CUP_customers_customer_phone CUP
     ON CUP.CU_CUP_CU_ID = CU.CU_ID;
' 
LANGUAGE SQL STABLE
;
-- Now perspective ----------------------------------------------------------------------------------------------------
-- nCU_customers viewed as it currently is (cannot include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.nCU_customers
AS
SELECT *
  FROM public.pCU_customers(current_timestamp::timestamp)
;
-- Latest perspective -------------------------------------------------------------------------------------------------
-- lPI_purchase_items viewed by the latest available information (may include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.lPI_purchase_items AS
SELECT PI.PI_ID
     , PI.Metadata_PI
     , PRI.PI_PRI_PI_ID
     , PRI.Metadata_PI_PRI
     , PRI.PI_PRI_purchase_items_product_id
     , PUI.PI_PUI_PI_ID
     , PUI.Metadata_PI_PUI
     , PUI.PI_PUI_purchase_items_purchase_id
     , PRC.PI_PRC_PI_ID
     , PRC.Metadata_PI_PRC
     , PRC.PI_PRC_purchase_items_product_count
     , PRP.PI_PRP_PI_ID
     , PRP.Metadata_PI_PRP
     , PRP.PI_PRP_purchase_items_product_price
  FROM public.PI_purchase_items PI
  LEFT 
  JOIN public.PI_PRI_purchase_items_product_id PRI
    ON PRI.PI_PRI_PI_ID = PI.PI_ID
  LEFT 
  JOIN public.PI_PUI_purchase_items_purchase_id PUI
    ON PUI.PI_PUI_PI_ID = PI.PI_ID
  LEFT 
  JOIN public.PI_PRC_purchase_items_product_count PRC
    ON PRC.PI_PRC_PI_ID = PI.PI_ID
  LEFT 
  JOIN public.PI_PRP_purchase_items_product_price PRP
    ON PRP.PI_PRP_PI_ID = PI.PI_ID;
;
-- Point-in-time perspective ------------------------------------------------------------------------------------------
-- pPI_purchase_items viewed as it was on the given timepoint
-----------------------------------------------------------------------------------------------------------------------
 CREATE OR REPLACE FUNCTION public.pPI_purchase_items 
      ( changingTimepoint timestamp
      )
RETURNS TABLE 
      ( PI_ID bigint
      , Metadata_PI bigint
      , PI_PRI_PI_ID bigint
      , Metadata_PI_PRI bigint
      , PI_PRI_purchase_items_product_id bigint
      , PI_PUI_PI_ID bigint
      , Metadata_PI_PUI bigint
      , PI_PUI_purchase_items_purchase_id bigint
      , PI_PRC_PI_ID bigint
      , Metadata_PI_PRC bigint
      , PI_PRC_purchase_items_product_count bigint
      , PI_PRP_PI_ID bigint
      , Metadata_PI_PRP bigint
      , PI_PRP_purchase_items_product_price numeric(9,2)
      ) 
AS 
'
 SELECT PI.PI_ID
      , PI.Metadata_PI
      , PRI.PI_PRI_PI_ID
      , PRI.Metadata_PI_PRI
      , PRI.PI_PRI_purchase_items_product_id
      , PUI.PI_PUI_PI_ID
      , PUI.Metadata_PI_PUI
      , PUI.PI_PUI_purchase_items_purchase_id
      , PRC.PI_PRC_PI_ID
      , PRC.Metadata_PI_PRC
      , PRC.PI_PRC_purchase_items_product_count
      , PRP.PI_PRP_PI_ID
      , PRP.Metadata_PI_PRP
      , PRP.PI_PRP_purchase_items_product_price
   FROM public.PI_purchase_items PI
   LEFT 
   JOIN public.PI_PRI_purchase_items_product_id PRI
     ON PRI.PI_PRI_PI_ID = PI.PI_ID
   LEFT 
   JOIN public.PI_PUI_purchase_items_purchase_id PUI
     ON PUI.PI_PUI_PI_ID = PI.PI_ID
   LEFT 
   JOIN public.PI_PRC_purchase_items_product_count PRC
     ON PRC.PI_PRC_PI_ID = PI.PI_ID
   LEFT 
   JOIN public.PI_PRP_purchase_items_product_price PRP
     ON PRP.PI_PRP_PI_ID = PI.PI_ID;
' 
LANGUAGE SQL STABLE
;
-- Now perspective ----------------------------------------------------------------------------------------------------
-- nPI_purchase_items viewed as it currently is (cannot include future versions)
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public.nPI_purchase_items
AS
SELECT *
  FROM public.pPI_purchase_items(current_timestamp::timestamp)
;
-- SCHEMA EVOLUTION ---------------------------------------------------------------------------------------------------
--
-- The following tables, views, and functions are used to track schema changes
-- over time, as well as providing every XML that has been 'executed' against
-- the database.
--
-- Schema table -------------------------------------------------------------------------------------------------------
-- The schema table holds every xml that has been executed against the database
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public._Schema 
     ( version int generated by default as identity primary key
     , activation timestamp not null
     , schema jsonb not null
     )
;
-- Insert the JSON schema (as of now)
INSERT INTO public._Schema 
     ( activation
     , schema
     )
SELECT current_timestamp
     , '{
   "schema": {
      "format": "0.99.11",
      "date": "2023-11-12",
      "time": "19:56:16",
      "metadata": {
         "changingRange": "timestamp",
         "encapsulation": "public",
         "identity": "bigint",
         "metadataPrefix": "Metadata",
         "metadataType": "bigint",
         "metadataUsage": "true",
         "changingSuffix": "ChangedAt",
         "identitySuffix": "ID",
         "positIdentity": "bigint",
         "positGenerator": "true",
         "positingRange": "timestamp",
         "positingSuffix": "PositedAt",
         "positorRange": "bigint",
         "positorSuffix": "Positor",
         "reliabilityRange": "decimal(5,2)",
         "reliabilitySuffix": "Reliability",
         "defaultReliability": "1",
         "deleteReliability": "0",
         "assertionSuffix": "Assertion",
         "partitioning": "false",
         "entityIntegrity": "true",
         "restatability": "true",
         "idempotency": "false",
         "assertiveness": "true",
         "naming": "improved",
         "positSuffix": "Posit",
         "annexSuffix": "Annex",
         "chronon": "timestamp",
         "now": "current_timestamp",
         "dummySuffix": "Dummy",
         "versionSuffix": "Version",
         "statementTypeSuffix": "StatementType",
         "checksumSuffix": "Checksum",
         "businessViews": "false",
         "decisiveness": "true",
         "equivalence": "false",
         "equivalentSuffix": "EQ",
         "equivalentRange": "bigint",
         "databaseTarget": "PostgreSQL",
         "temporalization": "uni",
         "deletability": "false",
         "deletablePrefix": "Deletable",
         "deletionSuffix": "Deleted",
         "privacy": "Ignore",
         "checksum": "false",
         "triggers": "true",
         "knotAliases": "false"
      },
      "anchor": {
         "CA": {
            "id": "CA",
            "mnemonic": "CA",
            "descriptor": "categories",
            "identity": "bigint",
            "metadata": {
               "capsule": "public",
               "generator": "true"
            },
            "attribute": {
               "CAN": {
                  "id": "CAN",
                  "mnemonic": "CAN",
                  "descriptor": "category_name",
                  "dataRange": "VARCHAR(100)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "863.19",
                     "y": "379.63",
                     "fixed": "false"
                  }
               },
               "CAI1": {
                  "id": "CAI1",
                  "mnemonic": "CAI1",
                  "descriptor": "category_id",
                  "dataRange": "SERIAL",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "777.78",
                     "y": "386.56",
                     "fixed": "false"
                  }
               }
            },
            "attributes": [
               "CAN",
               "CAI1"
            ],
            "layout": {
               "x": "830.78",
               "y": "329.14",
               "fixed": "true"
            }
         },
         "PR": {
            "id": "PR",
            "mnemonic": "PR",
            "descriptor": "products",
            "identity": "bigint",
            "metadata": {
               "capsule": "public",
               "generator": "true"
            },
            "attribute": {
               "CAI2": {
                  "id": "CAI2",
                  "mnemonic": "CAI2",
                  "descriptor": "category_id",
                  "dataRange": "bigint",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "989.80",
                     "y": "106.86",
                     "fixed": "false"
                  }
               },
               "MAI": {
                  "id": "MAI",
                  "mnemonic": "MAI",
                  "descriptor": "manufacturer_id",
                  "dataRange": "bigint",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "887.96",
                     "y": "239.13",
                     "fixed": "false"
                  }
               },
               "PRI": {
                  "id": "PRI",
                  "mnemonic": "PRI",
                  "descriptor": "product_id",
                  "dataRange": "SERIAL",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "915.24",
                     "y": "110.70",
                     "fixed": "false"
                  }
               },
               "PPU": {
                  "id": "PPU",
                  "mnemonic": "PPU",
                  "descriptor": "product_picture_url",
                  "dataRange": "varchar(255)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "989.72",
                     "y": "172.01",
                     "fixed": "false"
                  }
               },
               "PRN": {
                  "id": "PRN",
                  "mnemonic": "PRN",
                  "descriptor": "product_name",
                  "dataRange": "varchar(255)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "861.58",
                     "y": "160.38",
                     "fixed": "false"
                  }
               },
               "PAR": {
                  "id": "PAR",
                  "mnemonic": "PAR",
                  "descriptor": "product_age_restriction",
                  "dataRange": "bigint",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "962.13",
                     "y": "76.48",
                     "fixed": "false"
                  }
               },
               "PRD": {
                  "id": "PRD",
                  "mnemonic": "PRD",
                  "descriptor": "product_description",
                  "dataRange": "varchar(255)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "902.24",
                     "y": "275.04",
                     "fixed": "false"
                  }
               }
            },
            "attributes": [
               "CAI2",
               "MAI",
               "PRI",
               "PPU",
               "PRN",
               "PAR",
               "PRD"
            ],
            "layout": {
               "x": "956.06",
               "y": "206.02",
               "fixed": "true"
            }
         },
         "MA": {
            "id": "MA",
            "mnemonic": "MA",
            "descriptor": "manufacturers",
            "identity": "bigint",
            "metadata": {
               "capsule": "public",
               "generator": "true"
            },
            "attribute": {
               "MAN": {
                  "id": "MAN",
                  "mnemonic": "MAN",
                  "descriptor": "manufacturer_name",
                  "dataRange": "varchar(100)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "727.90",
                     "y": "20.27",
                     "fixed": "false"
                  }
               },
               "MLE": {
                  "id": "MLE",
                  "mnemonic": "MLE",
                  "descriptor": "manufacturer_legal_entity",
                  "dataRange": "varchar(100)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "769.48",
                     "y": "-0.43",
                     "fixed": "false"
                  }
               }
            },
            "attributes": [
               "MAN",
               "MLE"
            ],
            "layout": {
               "x": "815.47",
               "y": "-14.92",
               "fixed": "false"
            }
         },
         "PC": {
            "id": "PC",
            "mnemonic": "PC",
            "descriptor": "price_change",
            "identity": "bigint",
            "metadata": {
               "capsule": "public",
               "generator": "true"
            },
            "attribute": {
               "PRI": {
                  "id": "PRI",
                  "mnemonic": "PRI",
                  "descriptor": "product_id",
                  "dataRange": "bigint",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1324.97",
                     "y": "-20.35",
                     "fixed": "false"
                  }
               },
               "PCT": {
                  "id": "PCT",
                  "mnemonic": "PCT",
                  "descriptor": "price_change_ts",
                  "dataRange": "timestamp",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1215.06",
                     "y": "-66.19",
                     "fixed": "false"
                  }
               },
               "NEP": {
                  "id": "NEP",
                  "mnemonic": "NEP",
                  "descriptor": "new_price",
                  "dataRange": "numeric(9,2)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1277.04",
                     "y": "-81.60",
                     "fixed": "false"
                  }
               }
            },
            "attributes": [
               "PRI",
               "PCT",
               "NEP"
            ],
            "layout": {
               "x": "1248.47",
               "y": "-0.65",
               "fixed": "false"
            }
         },
         "DE": {
            "id": "DE",
            "mnemonic": "DE",
            "descriptor": "deliveries",
            "identity": "bigint",
            "metadata": {
               "capsule": "public",
               "generator": "true"
            },
            "attribute": {
               "STI": {
                  "id": "STI",
                  "mnemonic": "STI",
                  "descriptor": "store_id",
                  "dataRange": "bigint",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "940.52",
                     "y": "538.67",
                     "fixed": "false"
                  }
               },
               "DEI": {
                  "id": "DEI",
                  "mnemonic": "DEI",
                  "descriptor": "delivery_id",
                  "dataRange": "bigint",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "898.62",
                     "y": "502.19",
                     "fixed": "false"
                  }
               },
               "PRI": {
                  "id": "PRI",
                  "mnemonic": "PRI",
                  "descriptor": "product_id",
                  "dataRange": "bigint",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1077.54",
                     "y": "551.51",
                     "fixed": "true"
                  }
               },
               "DED": {
                  "id": "DED",
                  "mnemonic": "DED",
                  "descriptor": "delivery_date",
                  "dataRange": "date",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "991.97",
                     "y": "553.11",
                     "fixed": "false"
                  }
               },
               "PRC": {
                  "id": "PRC",
                  "mnemonic": "PRC",
                  "descriptor": "product_count",
                  "dataRange": "bigint",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "964.52",
                     "y": "600.45",
                     "fixed": "false"
                  }
               }
            },
            "attributes": [
               "STI",
               "DEI",
               "PRI",
               "DED",
               "PRC"
            ],
            "layout": {
               "x": "984.52",
               "y": "491.89",
               "fixed": "true"
            }
         },
         "ST": {
            "id": "ST",
            "mnemonic": "ST",
            "descriptor": "stores",
            "identity": "bigint",
            "metadata": {
               "capsule": "public",
               "generator": "true"
            },
            "attribute": {
               "STI": {
                  "id": "STI",
                  "mnemonic": "STI",
                  "descriptor": "store_id",
                  "dataRange": "SERIAL",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1351.67",
                     "y": "557.35",
                     "fixed": "false"
                  }
               },
               "STN": {
                  "id": "STN",
                  "mnemonic": "STN",
                  "descriptor": "store_name",
                  "dataRange": "varchar(255)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1377.32",
                     "y": "605.39",
                     "fixed": "false"
                  }
               },
               "STC": {
                  "id": "STC",
                  "mnemonic": "STC",
                  "descriptor": "store_country",
                  "dataRange": "varchar(255)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1358.46",
                     "y": "623.42",
                     "fixed": "false"
                  }
               },
               "SCI": {
                  "id": "SCI",
                  "mnemonic": "SCI",
                  "descriptor": "store_city",
                  "dataRange": "varchar(255)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1331.12",
                     "y": "659.05",
                     "fixed": "false"
                  }
               },
               "STA": {
                  "id": "STA",
                  "mnemonic": "STA",
                  "descriptor": "store_address",
                  "dataRange": "varchar(255)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1265.21",
                     "y": "667.85",
                     "fixed": "false"
                  }
               }
            },
            "attributes": [
               "STI",
               "STN",
               "STC",
               "SCI",
               "STA"
            ],
            "layout": {
               "x": "1280.94",
               "y": "580.70",
               "fixed": "false"
            }
         },
         "PU": {
            "id": "PU",
            "mnemonic": "PU",
            "descriptor": "purchases",
            "identity": "bigint",
            "metadata": {
               "capsule": "public",
               "generator": "true"
            },
            "attribute": {
               "PUD": {
                  "id": "PUD",
                  "mnemonic": "PUD",
                  "descriptor": "purchase_date",
                  "dataRange": "timestamp",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1437.81",
                     "y": "485.27",
                     "fixed": "false"
                  }
               },
               "PUI": {
                  "id": "PUI",
                  "mnemonic": "PUI",
                  "descriptor": "purchase_id",
                  "dataRange": "bigint",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1482.95",
                     "y": "473.27",
                     "fixed": "false"
                  }
               },
               "PPT": {
                  "id": "PPT",
                  "mnemonic": "PPT",
                  "descriptor": "purchase_payment_type",
                  "dataRange": "varchar(255)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1356.45",
                     "y": "450.95",
                     "fixed": "false"
                  }
               },
               "CUI": {
                  "id": "CUI",
                  "mnemonic": "CUI",
                  "descriptor": "customer_id",
                  "dataRange": "bigint",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1500.19",
                     "y": "449.61",
                     "fixed": "false"
                  }
               },
               "STI": {
                  "id": "STI",
                  "mnemonic": "STI",
                  "descriptor": "store_id",
                  "dataRange": "bigint",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1515.60",
                     "y": "420.65",
                     "fixed": "false"
                  }
               }
            },
            "attributes": [
               "PUD",
               "PUI",
               "PPT",
               "CUI",
               "STI"
            ],
            "layout": {
               "x": "1404.71",
               "y": "416.28",
               "fixed": "false"
            }
         },
         "CU": {
            "id": "CU",
            "mnemonic": "CU",
            "descriptor": "customers",
            "identity": "bigint",
            "metadata": {
               "capsule": "public",
               "generator": "true"
            },
            "attribute": {
               "CUI": {
                  "id": "CUI",
                  "mnemonic": "CUI",
                  "descriptor": "customer_id",
                  "dataRange": "SERIAL",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1511.62",
                     "y": "181.83",
                     "fixed": "false"
                  }
               },
               "CUF": {
                  "id": "CUF",
                  "mnemonic": "CUF",
                  "descriptor": "customer_fname",
                  "dataRange": "varchar(100)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1593.82",
                     "y": "182.02",
                     "fixed": "false"
                  }
               },
               "CUL": {
                  "id": "CUL",
                  "mnemonic": "CUL",
                  "descriptor": "customer_lname",
                  "dataRange": "varchar(100)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1620.59",
                     "y": "216.58",
                     "fixed": "false"
                  }
               },
               "CUG": {
                  "id": "CUG",
                  "mnemonic": "CUG",
                  "descriptor": "customer_gender",
                  "dataRange": "varchar(100)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1638.84",
                     "y": "264.59",
                     "fixed": "false"
                  }
               },
               "CUP": {
                  "id": "CUP",
                  "mnemonic": "CUP",
                  "descriptor": "customer_phone",
                  "dataRange": "varchar(100)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1612.95",
                     "y": "307.56",
                     "fixed": "false"
                  }
               }
            },
            "attributes": [
               "CUI",
               "CUF",
               "CUL",
               "CUG",
               "CUP"
            ],
            "layout": {
               "x": "1524.74",
               "y": "262.92",
               "fixed": "true"
            }
         },
         "PI": {
            "id": "PI",
            "mnemonic": "PI",
            "descriptor": "purchase_items",
            "identity": "bigint",
            "metadata": {
               "capsule": "public",
               "generator": "true"
            },
            "attribute": {
               "PRI": {
                  "id": "PRI",
                  "mnemonic": "PRI",
                  "descriptor": "product_id",
                  "dataRange": "bigint",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1360.56",
                     "y": "204.05",
                     "fixed": "false"
                  }
               },
               "PUI": {
                  "id": "PUI",
                  "mnemonic": "PUI",
                  "descriptor": "purchase_id",
                  "dataRange": "bigint",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1266.70",
                     "y": "314.81",
                     "fixed": "false"
                  }
               },
               "PRC": {
                  "id": "PRC",
                  "mnemonic": "PRC",
                  "descriptor": "product_count",
                  "dataRange": "bigint",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1221.61",
                     "y": "201.11",
                     "fixed": "false"
                  }
               },
               "PRP": {
                  "id": "PRP",
                  "mnemonic": "PRP",
                  "descriptor": "product_price",
                  "dataRange": "numeric(9,2)",
                  "metadata": {
                     "privacy": "Ignore",
                     "capsule": "public",
                     "idempotent": "false",
                     "deletable": "false"
                  },
                  "layout": {
                     "x": "1287.97",
                     "y": "169.07",
                     "fixed": "false"
                  }
               }
            },
            "attributes": [
               "PRI",
               "PUI",
               "PRC",
               "PRP"
            ],
            "layout": {
               "x": "1300.21",
               "y": "264.31",
               "fixed": "true"
            }
         }
      },
      "anchors": [
         "CA",
         "PR",
         "MA",
         "PC",
         "DE",
         "ST",
         "PU",
         "CU",
         "PI"
      ],
      "tie": {
         "CA_cat_id_PR_cat_id2": {
            "id": "CA_cat_id_PR_cat_id2",
            "anchorRole": {
               "CA_cat_id": {
                  "id": "CA_cat_id",
                  "role": "cat_id",
                  "type": "CA",
                  "identifier": "false"
               },
               "PR_cat_id2": {
                  "id": "PR_cat_id2",
                  "role": "cat_id2",
                  "type": "PR",
                  "identifier": "true"
               }
            },
            "roles": [
               "CA_cat_id",
               "PR_cat_id2"
            ],
            "metadata": {
               "capsule": "public",
               "deletable": "false",
               "idempotent": "false"
            },
            "layout": {
               "x": "809.97",
               "y": "230.93",
               "fixed": "false"
            }
         },
         "PR_man_id2_MA_man_id": {
            "id": "PR_man_id2_MA_man_id",
            "anchorRole": {
               "PR_man_id2": {
                  "id": "PR_man_id2",
                  "role": "man_id2",
                  "type": "PR",
                  "identifier": "true"
               },
               "MA_man_id": {
                  "id": "MA_man_id",
                  "role": "man_id",
                  "type": "MA",
                  "identifier": "true"
               }
            },
            "roles": [
               "PR_man_id2",
               "MA_man_id"
            ],
            "metadata": {
               "capsule": "public",
               "deletable": "false",
               "idempotent": "false"
            },
            "layout": {
               "x": "835.58",
               "y": "79.89",
               "fixed": "false"
            }
         },
         "PR_prod_id2_PC_prod_id": {
            "id": "PR_prod_id2_PC_prod_id",
            "anchorRole": {
               "PR_prod_id2": {
                  "id": "PR_prod_id2",
                  "role": "prod_id2",
                  "type": "PR",
                  "identifier": "true"
               },
               "PC_prod_id": {
                  "id": "PC_prod_id",
                  "role": "prod_id",
                  "type": "PC",
                  "identifier": "true"
               }
            },
            "roles": [
               "PR_prod_id2",
               "PC_prod_id"
            ],
            "metadata": {
               "capsule": "public",
               "deletable": "false",
               "idempotent": "false"
            },
            "layout": {
               "x": "1162.13",
               "y": "155.37",
               "fixed": "true"
            }
         },
         "PR_prod_id_DE_prod_id2": {
            "id": "PR_prod_id_DE_prod_id2",
            "anchorRole": {
               "PR_prod_id": {
                  "id": "PR_prod_id",
                  "role": "prod_id",
                  "type": "PR",
                  "identifier": "true"
               },
               "DE_prod_id2": {
                  "id": "DE_prod_id2",
                  "role": "prod_id2",
                  "type": "DE",
                  "identifier": "true"
               }
            },
            "roles": [
               "PR_prod_id",
               "DE_prod_id2"
            ],
            "metadata": {
               "capsule": "public",
               "deletable": "false",
               "idempotent": "false"
            },
            "layout": {
               "x": "963.89",
               "y": "379.35",
               "fixed": "false"
            }
         },
         "DE_store_id2_ST_store_id": {
            "id": "DE_store_id2_ST_store_id",
            "anchorRole": {
               "DE_store_id2": {
                  "id": "DE_store_id2",
                  "role": "store_id2",
                  "type": "DE",
                  "identifier": "true"
               },
               "ST_store_id": {
                  "id": "ST_store_id",
                  "role": "store_id",
                  "type": "ST",
                  "identifier": "true"
               }
            },
            "roles": [
               "DE_store_id2",
               "ST_store_id"
            ],
            "metadata": {
               "capsule": "public",
               "deletable": "false",
               "idempotent": "false"
            },
            "layout": {
               "x": "1137.50",
               "y": "544.44",
               "fixed": "false"
            }
         },
         "ST_store_id2_PU_store_id": {
            "id": "ST_store_id2_PU_store_id",
            "anchorRole": {
               "ST_store_id2": {
                  "id": "ST_store_id2",
                  "role": "store_id2",
                  "type": "ST",
                  "identifier": "true"
               },
               "PU_store_id": {
                  "id": "PU_store_id",
                  "role": "store_id",
                  "type": "PU",
                  "identifier": "true"
               }
            },
            "roles": [
               "ST_store_id2",
               "PU_store_id"
            ],
            "metadata": {
               "capsule": "public",
               "deletable": "false",
               "idempotent": "false"
            },
            "layout": {
               "x": "1252.84",
               "y": "426.89",
               "fixed": "true"
            }
         },
         "PU_cust_id1_CU_cust_id": {
            "id": "PU_cust_id1_CU_cust_id",
            "anchorRole": {
               "PU_cust_id1": {
                  "id": "PU_cust_id1",
                  "role": "cust_id1",
                  "type": "PU",
                  "identifier": "true"
               },
               "CU_cust_id": {
                  "id": "CU_cust_id",
                  "role": "cust_id",
                  "type": "CU",
                  "identifier": "true"
               }
            },
            "roles": [
               "PU_cust_id1",
               "CU_cust_id"
            ],
            "metadata": {
               "capsule": "public",
               "deletable": "false",
               "idempotent": "false"
            },
            "layout": {
               "x": "1496.77",
               "y": "361.74",
               "fixed": "false"
            }
         },
         "PU_pur_id2_PI_pur_id": {
            "id": "PU_pur_id2_PI_pur_id",
            "anchorRole": {
               "PU_pur_id2": {
                  "id": "PU_pur_id2",
                  "role": "pur_id2",
                  "type": "PU",
                  "identifier": "true"
               },
               "PI_pur_id": {
                  "id": "PI_pur_id",
                  "role": "pur_id",
                  "type": "PI",
                  "identifier": "true"
               }
            },
            "roles": [
               "PU_pur_id2",
               "PI_pur_id"
            ],
            "metadata": {
               "capsule": "public",
               "deletable": "false",
               "idempotent": "false"
            },
            "layout": {
               "x": "1352.02",
               "y": "331.43",
               "fixed": "false"
            }
         },
         "PI_prod_id_PR_prod_id2": {
            "id": "PI_prod_id_PR_prod_id2",
            "anchorRole": {
               "PI_prod_id": {
                  "id": "PI_prod_id",
                  "role": "prod_id",
                  "type": "PI",
                  "identifier": "true"
               },
               "PR_prod_id2": {
                  "id": "PR_prod_id2",
                  "role": "prod_id2",
                  "type": "PR",
                  "identifier": "true"
               }
            },
            "roles": [
               "PI_prod_id",
               "PR_prod_id2"
            ],
            "metadata": {
               "capsule": "public",
               "deletable": "false",
               "idempotent": "false"
            },
            "layout": {
               "x": "1104.92",
               "y": "263.44",
               "fixed": "true"
            }
         }
      },
      "ties": [
         "CA_cat_id_PR_cat_id2",
         "PR_man_id2_MA_man_id",
         "PR_prod_id2_PC_prod_id",
         "PR_prod_id_DE_prod_id2",
         "DE_store_id2_ST_store_id",
         "ST_store_id2_PU_store_id",
         "PU_cust_id1_CU_cust_id",
         "PU_pur_id2_PI_pur_id",
         "PI_prod_id_PR_prod_id2"
      ]
   }
}'
;
-- Schema expanded view -----------------------------------------------------------------------------------------------
-- A view of the schema table that expands the XML attributes into columns
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public._Schema_Expanded 
AS
SELECT version
     , activation
     , (schema -> 'schema' ->> 'format') as format
     , (schema -> 'schema' ->> 'date')::date as date
     , (schema -> 'schema' ->> 'time')::time as time
     , (schema -> 'schema' -> 'metadata' ->> 'temporalization') as temporalization
     , (schema -> 'schema' -> 'metadata' ->> 'databaseTarget') as databaseTarget	
     , (schema -> 'schema' -> 'metadata' ->> 'changingRange') as changingRange
     , (schema -> 'schema' -> 'metadata' ->> 'encapsulation') as encapsulation
     , (schema -> 'schema' -> 'metadata' ->> 'identity') as identity
     , (schema -> 'schema' -> 'metadata' ->> 'metadataPrefix') as metadataPrefix
     , (schema -> 'schema' -> 'metadata' ->> 'metadataType') as metadataType
     , (schema -> 'schema' -> 'metadata' ->> 'metadataUsage') as metadataUsage	
     , (schema -> 'schema' -> 'metadata' ->> 'changingSuffix') as changingSuffix
     , (schema -> 'schema' -> 'metadata' ->> 'identitySuffix') as identitySuffix
     , (schema -> 'schema' -> 'metadata' ->> 'positIdentity') as positIdentity
     , (schema -> 'schema' -> 'metadata' ->> 'positGenerator') as positGenerator	
     , (schema -> 'schema' -> 'metadata' ->> 'positingRange') as positingRange
     , (schema -> 'schema' -> 'metadata' ->> 'positingSuffix') as positingSuffix	
     , (schema -> 'schema' -> 'metadata' ->> 'positorRange') as positorRange
     , (schema -> 'schema' -> 'metadata' ->> 'positorSuffix') as positorSuffix
     , (schema -> 'schema' -> 'metadata' ->> 'reliabilityRange') as reliabilityRange
     , (schema -> 'schema' -> 'metadata' ->> 'reliabilitySuffix') as reliabilitySuffix
     , (schema -> 'schema' -> 'metadata' ->> 'reliableCutoff') as reliableCutoff
     , (schema -> 'schema' -> 'metadata' ->> 'deleteReliability') as deleteReliability	
     , (schema -> 'schema' -> 'metadata' ->> 'reliableSuffix') as reliableSuffix
     , (schema -> 'schema' -> 'metadata' ->> 'partitioning') as partitioning
     , (schema -> 'schema' -> 'metadata' ->> 'entityIntegrity') as entityIntegrity
     , (schema -> 'schema' -> 'metadata' ->> 'restatability') as restatability
     , (schema -> 'schema' -> 'metadata' ->> 'idempotency') as idempotency
     , (schema -> 'schema' -> 'metadata' ->> 'assertiveness') as assertiveness	
     , (schema -> 'schema' -> 'metadata' ->> 'naming') as naming
     , (schema -> 'schema' -> 'metadata' ->> 'positSuffix') as positSuffix	
     , (schema -> 'schema' -> 'metadata' ->> 'annexSuffix') as annexSuffix
     , (schema -> 'schema' -> 'metadata' ->> 'chronon') as chronon
     , (schema -> 'schema' -> 'metadata' ->> 'now') as now
     , (schema -> 'schema' -> 'metadata' ->> 'dummySuffix') as dummySuffix
     , (schema -> 'schema' -> 'metadata' ->> 'statementTypeSuffix') as statementTypeSuffix
     , (schema -> 'schema' -> 'metadata' ->> 'checksumSuffix') as checksumSuffix	
     , (schema -> 'schema' -> 'metadata' ->> 'businessViews') as businessViews
     , (schema -> 'schema' -> 'metadata' ->> 'equivalence') as equivalence
     , (schema -> 'schema' -> 'metadata' ->> 'equivalentSuffix') as equivalentSuffix
     , (schema -> 'schema' -> 'metadata' ->> 'equivalentRange') as equivalentRange	
  FROM public._Schema
;
-- Anchor view --------------------------------------------------------------------------------------------------------
-- The anchor view shows information about all the anchors in a schema
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public._Anchor
AS
SELECT s.version
     , s.activation
     , s.schema -> 'schema' -> 'metadata' ->> 'temporalization' as temporalization	
     , a.key || '_' || v.descriptor as name
     , v.descriptor	
     , a.key as mnemonic	
     , v.metadata ->> 'capsule' as capsule
     , v.identity
     , v.metadata ->> 'generator' as generator
     , coalesce(cardinality(v.attributes),0) as numberOfAttributes
  FROM public._schema as s
     , jsonb_each(s.schema -> 'schema' -> 'anchor') as a
     , jsonb_to_record(a.value) as v(descriptor text, identity text, "dataRange" text, metadata jsonb, attributes text[])
;	
-- Knot view ----------------------------------------------------------------------------------------------------------
-- The knot view shows information about all the knots in a schema
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public._Knot
AS
SELECT s.version
     , s.activation
     , s.schema -> 'schema' -> 'metadata' ->> 'temporalization' as temporalization	
     , k.key || '_' || v.descriptor as name	
     , v.descriptor
     , k.key as mnemonic	
     , v.metadata ->> 'capsule' as capsule
     , v."dataRange" as datarange	
     , v.identity
     , v.metadata ->> 'generator' as generator
     , coalesce(v.metadata ->> 'checksum','false') as checksum
     , v.description	
     , coalesce(v.metadata ->> 'equivalent','false') as equivalent
  FROM public._schema as s
     , jsonb_each(s.schema -> 'schema' -> 'knot') as k
     , jsonb_to_record(k.value) as v(descriptor text, identity text, "dataRange" text, description text, metadata jsonb)
;
-- Attribute view -----------------------------------------------------------------------------------------------------
-- The attribute view shows information about all the attributes in a schema
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public._Attribute
AS
SELECT s.version
     , s.activation
     , s.schema -> 'schema' -> 'metadata' ->> 'temporalization' as temporalization	
     , a.key || '_' || t.key || '_' || (a.value ->> 'descriptor') || '_' || v.descriptor as name
     , v.descriptor 
     , t.key as mnemonic 
     , v.metadata ->> 'capsule' as capsule
     , v."dataRange" as dataRange
     , case when v."knotRange" is null then false else true end as knotted
     , v."knotRange" as knotRange
     , case when v."timeRange" is null then false else true end as historized 
     , v."timeRange" as timeRange 
     , v.metadata ->> 'generator' as generator 
     , v.metadata ->> 'assertive' as assertive 
     , v.metadata ->> 'privacy' as privacy
     , coalesce(v.metadata ->> 'checksum','false') as checksum 
     , coalesce(v.metadata ->> 'equivalent','false') as equivalent
     , v.metadata ->> 'restatable' as restatable 
     , v.metadata ->> 'idempotent' as idempotent 
     , a.key as anchorMnemonic
     , (a.value ->> 'descriptor') as anchorDescriptor
     , (a.value ->> 'identity') as anchorIdentity
     , v.metadata ->> 'deletable' as deletable
     , v.metadata ->> 'encryptionGroup' as encryptionGroup
     , v.description
     , coalesce(cardinality(v.keys),0) as numberKeyOfStops
  FROM public._schema as s
     , jsonb_each(s.schema -> 'schema' -> 'anchor') as a
     , jsonb_each(a.value -> 'attribute') as t
     , jsonb_to_record(t.value) as v(descriptor text, identity text, "dataRange" text, "knotRange" text, "timeRange" text, description text, metadata jsonb, keys text[]) 
;
-- Tie view -----------------------------------------------------------------------------------------------------------
-- The tie view shows information about all the ties in a schema
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW public._Tie
AS
SELECT s.version
     , s.activation
     , s.schema -> 'schema' -> 'metadata' ->> 'temporalization' as temporalization	
     , t.key as name
     , v.metadata ->> 'capsule' as capsule	
     , case when v."timeRange" is null then false else true end as historized 
     , v."timeRange" as timeRange
     , cardinality(roles) as numberOfRoles
     , array(select value ->> 'role' from jsonb_each(v."anchorRole")) || array(select value ->> 'role' from jsonb_each(v."knotRole")) as roles
     , cardinality(array(select jsonb_object_keys(v."anchorRole"))) as numberOfAnchors
     , array(select split_part(jsonb_object_keys(v."anchorRole"),'_',1)) as anchors
     , coalesce(cardinality(array(select jsonb_object_keys(v."knotRole")))) as numberOfKnots
     , array(select split_part(jsonb_object_keys(v."knotRole"),'_',1)) as knots	
     --, v."anchorRole"
     , cardinality(array(select value ->> 'identifier' from jsonb_each(v."anchorRole") where value ->> 'identifier' = 'true') || array(select value ->> 'identifier' from jsonb_each(v."knotRole") where value ->> 'identifier' = 'true')) as identifiers
     , v.metadata ->> 'generator' as generator 
     , v.metadata ->> 'assertive' as assertive 
     , v.metadata ->> 'restatable' as restatable 
     , v.metadata ->> 'idempotent' as idempotent 
  FROM public._schema as s
     , jsonb_each(s.schema -> 'schema' -> 'tie') as t
     , jsonb_to_record(t.value) as v("timeRange" text, roles text[], metadata jsonb, "anchorRole" jsonb, "knotRole" jsonb)
;